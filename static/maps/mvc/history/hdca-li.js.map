{"version":3,"sources":["mvc/history/hdca-li.js"],"names":["_super","_collectionLi2","default","DCListItemView","HDCAListItemView","extend","className","prototype","_setUpListeners","_this","this","call","renderListen","model","options","render","jobStatesSummary","listenTo","change:tags change:visible change:state","_getFoldoutPanelClass","collectionType","_collectionView2","ListCollectionView","PairCollectionView","ListOfPairsCollectionView","ListOfListsCollectionView","_swapNewRender","$newRender","state","new","errored","terminal","running","get","_states2","NEW","OK","RUNNING","addClass","console","$","html","stateDescription","elementCount","collectionTypeDescription","jobStateSource","collection","itemsDescription","hasDetails","jobCount","isNew","collectionCount","simpleDescription","states","okPercent","runningPercent","errorCount","otherPercent","toString","templates","warnings","_","hidden","visible","_localization2","hid","name","titleBar","titleBarTemplate"],"mappings":"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","file":"../../../scripts/mvc/history/hdca-li.js","sourcesContent":["import STATES from \"mvc/dataset/states\";\nimport DC_LI from \"mvc/collection/collection-li\";\nimport DC_VIEW from \"mvc/collection/collection-view\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport HISTORY_ITEM_LI from \"mvc/history/history-item-li\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\nvar _super = DC_LI.DCListItemView;\n/** @class Read only view for HistoryDatasetCollectionAssociation (a dataset collection inside a history).\n */\nvar HDCAListItemView = _super.extend(\n    /** @lends HDCAListItemView.prototype */ {\n        className: `${_super.prototype.className} history-content`,\n\n        /** event listeners */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            var renderListen = (model, options) => {\n                this.render();\n            };\n            if (this.model.jobStatesSummary) {\n                this.listenTo(this.model.jobStatesSummary, \"change\", renderListen);\n            }\n            this.listenTo(this.model, {\n                \"change:tags change:visible change:state\": renderListen\n            });\n        },\n\n        /** Override to provide the proper collections panels as the foldout */\n        _getFoldoutPanelClass: function() {\n            var collectionType = this.model.get(\"collection_type\");\n            switch (collectionType) {\n                case \"list\":\n                    return DC_VIEW.ListCollectionView;\n                case \"paired\":\n                    return DC_VIEW.PairCollectionView;\n                case \"list:paired\":\n                    return DC_VIEW.ListOfPairsCollectionView;\n                case \"list:list\":\n                    return DC_VIEW.ListOfListsCollectionView;\n            }\n            throw new TypeError(`Unknown collection_type: ${collectionType}`);\n        },\n\n        /** In this override, add the state as a class for use with state-based CSS */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            //TODO: model currently has no state\n            var state;\n            var jobStatesSummary = this.model.jobStatesSummary;\n            if (jobStatesSummary) {\n                if (jobStatesSummary.new()) {\n                    state = \"new\";\n                } else if (jobStatesSummary.errored()) {\n                    state = \"error\";\n                } else if (jobStatesSummary.terminal()) {\n                    state = \"ok\";\n                } else if (jobStatesSummary.running()) {\n                    state = \"running\";\n                } else {\n                    state = \"queued\";\n                }\n            } else if (this.model.get(\"job_source_id\")) {\n                // Initial rendering - polling will fill in more details in a bit.\n                state = STATES.NEW;\n            } else {\n                state = this.model.get(\"populated_state\") ? STATES.OK : STATES.RUNNING;\n            }\n            this.$el.addClass(`state-${state}`);\n            var stateDescription = this.stateDescription();\n            console.log(stateDescription);\n            this.$(\".state-description\").html(stateDescription);\n            return this.$el;\n        },\n\n        stateDescription: function() {\n            var collection = this.model;\n            var elementCount = collection.get(\"element_count\");\n            console.log(elementCount);\n            var jobStateSource = collection.get(\"job_source_type\");\n            var collectionType = this.model.get(\"collection_type\");\n            var collectionTypeDescription;\n            if (collectionType == \"list\") {\n                collectionTypeDescription = \"list\";\n            } else if (collectionType == \"paired\") {\n                collectionTypeDescription = \"dataset pair\";\n            } else if (collectionType == \"list:paired\") {\n                collectionTypeDescription = \"list of pairs\";\n            } else {\n                collectionTypeDescription = \"nested list\";\n            }\n            var itemsDescription = \"\";\n            if (elementCount == 1) {\n                itemsDescription = ` with 1 item`;\n            } else if (elementCount) {\n                itemsDescription = ` with ${elementCount} items`;\n            }\n            var collectionCount = 42; // TODO - and handle unpopulated...\n            var jobStatesSummary = collection.jobStatesSummary;\n            var simpleDescription = `${collectionTypeDescription}${itemsDescription}`;\n            if (!jobStateSource || jobStateSource == \"Job\") {\n                return `a ${simpleDescription}`;\n            } else if (!jobStatesSummary || !jobStatesSummary.hasDetails()) {\n                return `\n                    <div class=\"progress state-progress\">\n                        <span class=\"note\">Loading job data for ${collectionTypeDescription}...</span>\n                        <div class=\"progress-bar info\" style=\"width:100%\">\n                    </div>`;\n            } else {\n                var isNew = jobStatesSummary.new();\n                var jobCount = isNew ? null : jobStatesSummary.jobCount();\n                if (isNew) {\n                    return `\n                        <div class=\"progress state-progress\">\n                            <span class=\"note\">Creating jobs...</span>\n                            <div class=\"progress-bar info\" style=\"width:100%\">\n                        </div>`;\n                } else if (jobStatesSummary.errored()) {\n                    var errorCount = jobStatesSummary.numInError();\n                    return `a ${collectionTypeDescription} with ${errorCount} / ${jobCount} jobs in error`;\n                } else if (jobStatesSummary.terminal()) {\n                    return `a ${simpleDescription}`;\n                } else {\n                    var running = jobStatesSummary.states()[\"running\"] || 0;\n                    var ok = jobStatesSummary.states()[\"ok\"] || 0;\n                    var okPercent = ok / (jobCount * 1.0);\n                    var runningPercent = running / (jobCount * 1.0);\n                    var otherPercent = 1.0 - okPercent - runningPercent;\n                    var jobsStr = jobCount && jobCount > 1 ? `${jobCount} jobs` : `a job`;\n                    return `\n                        <div class=\"progress state-progress\">\n                            <span class=\"note\">${jobsStr} generating a ${collectionTypeDescription}</span>\n                            <div class=\"progress-bar ok\" style=\"width:${okPercent * 100.0}%\"></div>\n                            <div class=\"progress-bar running\" style=\"width:${runningPercent * 100.0}%\"></div>\n                            <div class=\"progress-bar new\" style=\"width:${otherPercent * 100.0}%\">\n                        </div>`;\n                }\n            }\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `HDCAListItemView(${modelString})`;\n        }\n    }\n);\n\n/** underscore templates */\nHDCAListItemView.prototype.templates = (() => {\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        hidden: collection => {\n            collection.visible\n                ? \"\"\n                : `<div class=\"hidden-msg warningmessagesmall\">${_l(\"This collection has been hidden\")}</div>`;\n        }\n    });\n\n    var titleBarTemplate = collection => `\n        <div class=\"title-bar clear\" tabindex=\"0\">\n            <span class=\"state-icon\"></span>\n            <div class=\"title\">\n                <span class=\"hid\">${collection.hid}</span>\n                <span class=\"name\">${collection.name}</span>\n            </div>\n            <div class=\"state-description\">\n            </div>\n            ${HISTORY_ITEM_LI.nametagTemplate(collection)}\n        </div>\n    `;\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        titleBar: titleBarTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    HDCAListItemView: HDCAListItemView\n};\n"]}
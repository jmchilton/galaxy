{"version":3,"sources":["mvc/history/multi-panel.js"],"names":["HistoryViewColumn","Backbone","View","extend","_baseMvc2","default","LoggableMixin","_logNamespace","tagName","className","id","this","model","get","initialize","options","purgeAllowed","_","isUndefined","panel","createPanel","panelOptions","_historyViewEdit2","HistoryViewEdit","defaults","dragItems","$scrollContainer","$el","setUpListeners","column","trigger","setUpPanelListeners","listenTo","rendered","once","view:expanded view:rendered","view","$","off","columnLeft","offset","left","width","viewLeft","$panel","columnRight","render","speed","undefined","modelData","toJSON","html","template","css","setUpBehaviors","renderPanel","data","isCurrentHistory","currentHistory","controlsLeftTemplate","history","controlsRightTemplate","_renderDropTargetHelp","events","click .switch-to.btn","setAsCurrent","click .delete-history","done","click .undelete-history","click .purge-history","confirm","_localization2","click .copy-history","copy","toString","join","variable","MultiPanelColumns","columnWidth","borderWidth","columnGap","headerHeight","footerHeight","controlsHeight","multipanel","log","addClass","setCollection","stopListening","collection","setUpCollectionListeners","perPage","hdaQueue","_ajaxQueue2","NamedAjaxQueue","addModels","models","isArray","columnOptions","historySearch","datasetSearch","histories","error","add","fetchMore","renderColumns","_historyModel2","HistoryCollection","_postFetchAll","clear","setCurrentHistory","oldCurrentColumn","forEach","newCurrentColumn","sort","all-fetched","handleDeletedHistory","addAsCurrentColumn","set-as-current","change:deleted change:purged","columnMap","fetchData","remove","scrollLeft","findWhere","errorHandler","status","height","currentHistoryId","_recalcFirstColumnHeight","includeDeleted","xhr","badGatewayErrorModal","_ajaxErrorHandler","create","current","removeColumn","readyState","Galaxy","isString","title","setUpColumnListeners","_errorModal2","ajaxErrorModal","newColumn","createColumn","arguments","ev","createColumns","queueHdaFetch","config","allow_user_dataset_purge","widthToRemove","fadeOut","queueHdaFetchDetails","_dropData","parse","currentColumnDropTargetOn","queue","name","fn","checkColumnsInView","in-view","view:draggable:dragstart","JSON","dataTransfer","getData","view:draggable:dragend","sortedFilteredColumns","filters","droptarget:drop","sortedColumns","filter","json","contents","isCopyable","currentPage","filtered","fetchPage","toCopy","reverse","content","sorted","responses","columnMapLength","isNumber","length","self","index","every","map","call","sortedAndFiltered","fxSpeed","$middle","mainTemplate","numColumns","preventStackWidthAdj","empty","_addColumns","allFetched","append","loadingIndicatorTemplate","numExisting","children","_calcMiddleWidth","columns","FETCH_STATE_ON_ADD","i","delegateEvents","appendTo","start","contentsShown","fetchOptions","silent","ids","values","storage","allExpanded","renderInfo","details","fetchCurrentPage","renderItems","_jobStatesModel2","jobStateSummariesCollection","fetch","window","location","toggleDeletedHistories","haveDetails","progressivelyFetchDetails","_clickToggleDeletedDatasets","_renderEmptyMessage","show","msg","text","click .order .set-order","click #toggle-deleted","click #toggle-hidden","close","orderKey","currentTarget","toggleOptionsPopover","is","unshift","currentHistoryModel","root","toggleDeletedDatasets","_scrollLeft","delay","toggleShowDeleted","_clickToggleHiddenDatasets","toggleHiddenDatasets","placeholder","onfirstsearch","searchInput","fetchAll","orderDescriptions","onclear","setOrder","slice","searchFor","val","onsearch","resize","matchesAll","debouncedInView","debounce","checkForEndOfScroll","_moreOptionsPopover","placement","optionsPopoverTemplate","searchItems","progress","popover","curr","total","deferred","$firstColumn","$outerMiddle","clearSearch","columnsInView","viewport","_viewport","parent","scroll","END_PADDING","first","middleHeight","currentColumn","dataDropped","find","controlHeight","right","vp","inView","size","dropTargetOn","currentColumnDropTargetOff","prototype","dataDrop","dropTarget","update_time","update_time-asc","name-dsc","size-asc"],"mappings":"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","file":"../../../scripts/mvc/history/multi-panel.js","sourcesContent":["import _l from \"utils/localization\";\nimport HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_VIEW_EDIT from \"mvc/history/history-view-edit\";\nimport JOB_STATES_MODEL from \"mvc/history/job-states-model\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport baseMVC from \"mvc/base-mvc\";\nimport ajaxQueue from \"utils/ajax-queue\";\nimport \"ui/mode-button\";\nimport \"ui/search-input\";\n\nvar logNamespace = \"history\";\n/* ==============================================================================\nTODO:\n\n============================================================================== */\n/** @class A container for a history panel that renders controls for that history (delete, copy, etc.) */\nvar HistoryViewColumn = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    tagName: \"div\",\n    className: \"history-column flex-column flex-row-container\",\n    id: function id() {\n        if (!this.model) {\n            return \"\";\n        }\n        return `history-column-${this.model.get(\"id\")}`;\n    },\n\n    // ------------------------------------------------------------------------ set up\n    /** set up passed-in panel (if any) and listeners */\n    initialize: function initialize(options) {\n        options = options || {};\n        this.purgeAllowed = !_.isUndefined(options.purgeAllowed) ? options.purgeAllowed : false;\n        this.panel = options.panel || this.createPanel(options);\n\n        this.setUpListeners();\n    },\n\n    /** create a history panel for this column */\n    createPanel: function createPanel(panelOptions) {\n        return new HISTORY_VIEW_EDIT.HistoryViewEdit(\n            _.defaults(panelOptions, {\n                model: this.model,\n                // non-current panels should set their hdas to draggable\n                purgeAllowed: this.purgeAllowed,\n                dragItems: true,\n                $scrollContainer: function() {\n                    return this.$el;\n                }\n            })\n        );\n    },\n\n    /** set up reflexive listeners */\n    setUpListeners: function setUpListeners() {\n        var column = this;\n        //this.log( 'setUpListeners', this );\n        this.once(\"rendered\", () => {\n            column.trigger(\"rendered:initial\", column);\n        });\n        this.setUpPanelListeners();\n    },\n\n    /** set listeners needed for panel */\n    setUpPanelListeners: function setUpPanelListeners() {\n        var column = this;\n        this.listenTo(\n            this.panel,\n            {\n                //'all': function(){ console.info( 'panel of ' + this, arguments ); },\n\n                // assumes panel will take the longest to render\n                rendered: function() {\n                    column.trigger(\"rendered\", column);\n                },\n                // when a panel's view expands turn off the click handler on the rerun button so that it uses it's href\n                // this allows the button to open the tool rerun form in a new tab (instead of erroring)\n                // TODO: hack\n                \"view:expanded view:rendered\": function(view) {\n                    view.$(\".rerun-btn\").off();\n                }\n            },\n            this\n        );\n    },\n\n    /** do the dimensions of this column overlap the given (horizontal) browser coords? */\n    inView: function(viewLeft, viewRight) {\n        var columnLeft = this.$el.offset().left;\n        var columnRight = columnLeft + this.$el.width();\n        if (columnRight < viewLeft) {\n            return false;\n        }\n        if (columnLeft > viewRight) {\n            return false;\n        }\n        return true;\n    },\n\n    /** shortcut to the panel */\n    $panel: function $panel() {\n        return this.$(\".history-panel\");\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** render ths column, its panel, and set up plugins */\n    render: function render(speed) {\n        speed = speed !== undefined ? speed : \"fast\";\n        //this.log( this + '.render', this.$el, this.el );\n        //TODO: not needed\n        var modelData = this.model ? this.model.toJSON() : {};\n        this.$el.html(this.template(modelData));\n        this.renderPanel(speed);\n        // jq 1.12 doesn't fade/show properly when display: flex, re-set here\n        this.panel.$el.css(\"display\", \"flex\");\n        // if model and not children\n        // template\n        // render controls\n        this.setUpBehaviors();\n        // add panel\n        return this;\n    },\n\n    /** set up plugins */\n    setUpBehaviors: function setUpBehaviors() {\n        //this.log( 'setUpBehaviors:', this );\n        //var column = this;\n        // on panel size change, ...\n    },\n\n    /** column body template with inner div for panel based on data (model json) */\n    template: function template(data) {\n        data = _.extend(data || {}, {\n            isCurrentHistory: this.currentHistory\n        });\n        return $(\n            [\n                '<div class=\"panel-controls clear flex-row\">',\n                this.controlsLeftTemplate({\n                    history: data,\n                    view: this\n                }),\n                //'<button class=\"btn btn-default\">Herp</button>',\n                this.controlsRightTemplate({\n                    history: data,\n                    view: this\n                }),\n                \"</div>\",\n                '<div class=\"inner flex-row flex-column-container\">',\n                '<div id=\"history-',\n                data.id,\n                '\" class=\"history-column history-panel flex-column\"></div>',\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    /** render the panel contained in the column using speed for fx speed */\n    renderPanel: function renderPanel(speed) {\n        speed = speed !== undefined ? speed : \"fast\";\n        this.panel.setElement(this.$panel()).render(speed);\n        if (this.currentHistory) {\n            this.panel.$list().before(this.panel._renderDropTargetHelp());\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ behaviors and events\n    /** event map */\n    events: {\n        // will make this the current history\n        \"click .switch-to.btn\": function() {\n            this.model.setAsCurrent();\n        },\n        //TODO: remove boiler plate from next 3\n        \"click .delete-history\": function() {\n            var column = this;\n            this.model._delete().done(data => {\n                column.render();\n            });\n        },\n        \"click .undelete-history\": function() {\n            var column = this;\n            this.model.undelete().done(data => {\n                column.render();\n            });\n        },\n        \"click .purge-history\": function() {\n            if (confirm(_l(\"This will permanently remove the data. Are you sure?\"))) {\n                var column = this;\n                this.model.purge().done(data => {\n                    column.render();\n                });\n            }\n        },\n        // will copy this history and make the copy the current history\n        \"click .copy-history\": \"copy\"\n    },\n\n    // ------------------------------------------------------------------------ non-current controls\n    /** Open a modal to get a new history name, copy it (if not canceled), and makes the copy current */\n    copy: function copy() {\n        historyCopyDialog(this.model);\n    },\n\n    // ------------------------------------------------------------------------ templates\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsLeftTemplate: _.template(\n        [\n            '<div class=\"pull-left\">',\n            \"<% if( data.history.isCurrentHistory ){ %>\",\n            '<strong class=\"current-label\">',\n            _l(\"Current History\"),\n            \"</strong>\",\n            \"<% } else { %>\",\n            '<button class=\"switch-to btn btn-default\">',\n            _l(\"Switch to\"),\n            \"</button>\",\n            \"<% } %>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"data\" }\n    ),\n\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsRightTemplate: _.template(\n        [\n            '<div class=\"pull-right\">',\n            \"<% if( !data.history.purged ){ %>\",\n            '<div class=\"panel-menu btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n            '<span class=\"caret\"></span>',\n            \"</button>\",\n            '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n            \"<% if( !data.history.deleted ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"copy-history\">',\n            _l(\"Copy\"),\n            \"</a></li>\",\n            //'<li><a href=\"javascript:void(0);\" class=\"publish-history\">',\n            //    _l( 'Publish' ),\n            //'</a></li>',\n            '<li><a href=\"javascript:void(0);\" class=\"delete-history\">',\n            _l(\"Delete\"),\n            \"</a></li>\",\n            \"<% } else /* if is deleted */ { %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"undelete-history\">',\n            _l(\"Undelete\"),\n            \"</a></li>\",\n            \"<% } %>\",\n            \"<% if( data.view.purgeAllowed ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"purge-history\">',\n            _l(\"Purge\"),\n            \"</a></li>\",\n            \"<% } %>\",\n            \"</ul>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"data\" }\n    ),\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString: function() {\n        return `HistoryViewColumn(${this.panel ? this.panel : \"\"})`;\n    }\n});\n\n//==============================================================================\n/** @class A view of a HistoryCollection and displays histories similarly to the current history panel.\n */\nvar MultiPanelColumns = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    className: \"multi-panel-history\",\n\n    // ------------------------------------------------------------------------ set up\n    /** Set up internals, history collection, and columns to display the history */\n    initialize: function initialize(options) {\n        options = options || {};\n        this.log(`${this}.init`, options);\n\n        // add the className here (since we gen. pass the el in options)\n        this.$el.addClass(this.className);\n\n        // --- instance vars\n        //TODO: move these to some defaults\n        this.options = {\n            columnWidth: 312,\n            borderWidth: 1,\n            columnGap: 8,\n            headerHeight: 29,\n            footerHeight: 0,\n            controlsHeight: 20\n        };\n\n        /** how many histories to get when fetching a new batch/page */\n        this.perPage = options.perPage || 10;\n\n        /** named ajax queue for loading hdas */\n        this.hdaQueue = new ajaxQueue.NamedAjaxQueue([], false);\n\n        // --- set up models, sub-views, and listeners\n        /** the original unfiltered and unordered collection of histories */\n        this.collection = null;\n        /** model id to column map */\n        this.columnMap = {};\n        /** model id to column map */\n        this.columnOptions = options.columnOptions || {};\n\n        /** what to search for within all histories */\n        this.historySearch = null;\n        /** what to search for within all datasets */\n        this.datasetSearch = null;\n\n        this.setCollection(options.histories);\n        this.setUpListeners();\n    },\n\n    /** Set up reflexive listeners */\n    setUpListeners: function setUpListeners() {\n        var multipanel = this;\n        //multipanel.log( 'setUpListeners', multipanel );\n        this.on(\"end-of-scroll\", () => {\n            multipanel.collection.fetchMore();\n        });\n    },\n\n    // ------------------------------------------------------------------------ collection\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    setCollection: function setCollection(collection) {\n        // console.log( 'setCollection:', collection );\n        this.stopListening(this.collection);\n\n        this.collection = collection || new HISTORY_MODEL.HistoryCollection();\n        this.setUpCollectionListeners();\n\n        this.createColumns();\n        this.hdaQueue.clear();\n\n        this.trigger(\"new-collection\", this);\n        return this;\n    },\n\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    addModels: function addModels(models, collection, options) {\n        // console.log( 'addModels:', models, collection, options );\n        options = options || {};\n        var multipanel = this;\n        models = _.isArray(models) ? models : [models];\n        models.forEach(model => {\n            multipanel.addColumn(model, false);\n            // if this is from a fetch, sort will be called and it will call render\n        });\n        return this;\n    },\n\n    /** Set up listeners for the collection - handling: added histories, change of current, deletion, and sorting */\n    setUpCollectionListeners: function() {\n        var multipanel = this;\n        multipanel.listenTo(multipanel.collection, {\n            // handle ajax errors from the collection\n            error: multipanel.errorHandler,\n            // add multiple models\n            add: multipanel.addModels,\n            // when all the histories a user has have been fetched\n            \"all-fetched\": multipanel._postFetchAll,\n            // handle addition of histories, triggered by column copy and create new\n            \"new-current\": multipanel.addAsCurrentColumn,\n            // handle setting a history as current, triggered by history.setAsCurrent\n            \"set-as-current\": multipanel.setCurrentHistory,\n            // handle deleting a history (depends on whether panels is including deleted or not)\n            \"change:deleted change:purged\": multipanel.handleDeletedHistory,\n            // re-render columns after a sort\n            sort: function() {\n                multipanel.renderColumns(0);\n            }\n        });\n    },\n\n    _postFetchAll: function(fetchData) {\n        // console.log( '_postFetchAll' );\n        this.$(\".histories-loading-indicator\").remove();\n        // when new histories is fetched and the indicator is not required,\n        // the panel will jump slightly left - totally aesthetic but jarring\n        // TODO: this probably would be best handled elsewhere during a refinement cycle (if any)\n        if (!this.historySearch) {\n            var $scrollContainer = this.$(\".outer-middle\");\n            $scrollContainer.scrollLeft($scrollContainer.scrollLeft() + 24);\n        }\n    },\n\n    /** Re-render and set currentHistoryId to reflect a new current history */\n    setCurrentHistory: function setCurrentHistory(history) {\n        this.log(\"setCurrentHistory:\", history);\n        var oldCurrentColumn = _.findWhere(this.columnMap, {\n            currentHistory: true\n        });\n        if (oldCurrentColumn) {\n            oldCurrentColumn.currentHistory = false;\n            oldCurrentColumn.$el.height(\"\");\n        }\n\n        var newCurrentColumn = this.columnMap[this.collection.currentHistoryId];\n        newCurrentColumn.currentHistory = true;\n        this.collection.sort();\n        this._recalcFirstColumnHeight();\n        return newCurrentColumn;\n    },\n\n    /** Either remove a deleted history or re-render it to show the deleted message\n     *      based on collection.includeDeleted\n     */\n    handleDeletedHistory: function handleDeletedHistory(history) {\n        if (history.get(\"deleted\") || history.get(\"purged\")) {\n            this.log(\"handleDeletedHistory\", this.collection.includeDeleted, history);\n            var multipanel = this;\n            var column = multipanel.columnMap[history.id];\n            if (!column) {\n                return;\n            }\n\n            // if it's the current column, create a new, empty history as the new current\n            if (column.model.id === this.collection.currentHistoryId) {\n                //TODO: figuring out the order of async here is tricky\n                //  - for now let the user handle the two step process\n                //multipanel.collection.create().done( function(){\n                //    if( !multipanel.collection.includeDeleted ){ multipanel.removeColumn( column, false ); }\n                //});\n            } else if (!multipanel.collection.includeDeleted) {\n                multipanel.removeColumn(column);\n            }\n        }\n    },\n\n    // ........................................................................ error handling\n    /** Event handler for errors (from the history collection mainly)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  (e.g. this.trigger( 'error', 'Heres a message', 'Heres a title' ))\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n    errorHandler: function(model, xhr, options) {\n        // interrupted ajax or no connection\n        if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n            // return ERROR_MODAL.offlineErrorModal();\n            // fail silently\n            return;\n        }\n        // otherwise, leave something to report in the console\n        this.error(model, xhr, options);\n        // and feedback to a modal\n        // if sent two strings (and possibly details as 'options'), use those as message and title\n        if (_.isString(model) && _.isString(xhr)) {\n            var message = model;\n            var title = xhr;\n            return ERROR_MODAL.errorModal(message, title, options);\n        }\n        // bad gateway\n        // TODO: possibly to global handler\n        if (xhr && xhr.status === 502) {\n            return ERROR_MODAL.badGatewayErrorModal();\n        }\n        return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n    },\n\n    /** If Galaxy object is available handle error there, otherwise, locally (and crudely) */\n    _ajaxErrorHandler: function() {\n        ERROR_MODAL.ajaxErrorModal.apply(null, _.toArray(arguments));\n    },\n\n    /** create a new history and set it to current */\n    create: function(ev) {\n        return this.collection.create({ current: true });\n    },\n\n    // ------------------------------------------------------------------------ columns\n    /** create columns from collection */\n    createColumns: function createColumns(models, columnOptions) {\n        columnOptions = columnOptions || this.options.columnOptions;\n        var multipanel = this;\n        // clear column map\n        // TODO: make cummulative\n        multipanel.columnMap = {};\n        multipanel.collection.each((model, i) => {\n            var column = multipanel.createColumn(model, columnOptions);\n            multipanel.columnMap[model.id] = column;\n        });\n    },\n\n    /** create a column and its panel and set up any listeners to them */\n    createColumn: function createColumn(history, options) {\n        // options passed can be re-used, so extend them before adding the model to prevent pollution for the next\n        options = _.extend({}, options, {\n            model: history,\n            purgeAllowed: Galaxy.config.allow_user_dataset_purge\n        });\n        var column = new HistoryViewColumn(options);\n        if (history.id === this.collection.currentHistoryId) {\n            column.currentHistory = true;\n        }\n        this.setUpColumnListeners(column);\n        if (this.datasetSearch) {\n            column.panel.searchItems(this.datasetSearch);\n            this.queueHdaFetchDetails(column);\n        }\n        return column;\n    },\n\n    /** add a new column for history and render all columns if render is true */\n    addColumn: function add(history, render) {\n        // console.debug( 'adding column for:', history, render );\n        render = render !== undefined ? render : true;\n        var newColumn = this.createColumn(history);\n        this.columnMap[history.id] = newColumn;\n        if (render) {\n            this.renderColumns();\n        }\n        return newColumn;\n    },\n\n    /** add a new column for history and make it the current history/column */\n    addAsCurrentColumn: function add(history, collection, options) {\n        //this.log( 'adding current column for:', history );\n        var multipanel = this;\n\n        var newColumn = this.addColumn(history, false);\n        this.setCurrentHistory(history);\n        newColumn.once(\"rendered\", () => {\n            multipanel.queueHdaFetch(newColumn);\n        });\n        return newColumn;\n    },\n\n    /** remove the given column, it's listeners, and optionally render */\n    removeColumn: function remove(column, render) {\n        render = render !== undefined ? render : true;\n        this.log(\"removeColumn\", column);\n        if (!column) {\n            return;\n        }\n        var multipanel = this;\n        var widthToRemove = this.options.columnWidth + this.options.columnGap;\n        column.$el.fadeOut(\"fast\", function() {\n            if (render) {\n                $(this).remove();\n                multipanel.$(\".middle\").width(multipanel.$(\".middle\").width() - widthToRemove);\n                multipanel.checkColumnsInView();\n                multipanel._recalcFirstColumnHeight();\n            }\n\n            //TODO: to freeColumn (where Columns have freePanel)\n            multipanel.stopListening(column.panel);\n            multipanel.stopListening(column);\n            delete multipanel.columnMap[column.model.id];\n            column.remove();\n        });\n    },\n\n    /** set up listeners for a column and it's panel - handling: hda lazy-loading, drag and drop */\n    setUpColumnListeners: function setUpColumnListeners(column) {\n        var multipanel = this;\n        multipanel.listenTo(column, {\n            //'all': function(){ console.info( 'column ' + column + ':', arguments ) },\n            \"in-view\": multipanel.queueHdaFetch\n        });\n\n        multipanel.listenTo(column.panel, {\n            //'all': function(){ console.info( 'panel ' + column.panel + ':', arguments ) },\n\n            \"view:draggable:dragstart\": function(ev, view, panel, column) {\n                multipanel._dropData = JSON.parse(ev.dataTransfer.getData(\"text\"));\n                multipanel.currentColumnDropTargetOn();\n            },\n            \"view:draggable:dragend\": function(ev, view, panel, column) {\n                multipanel._dropData = null;\n                multipanel.currentColumnDropTargetOff();\n            },\n            \"droptarget:drop\": function(ev, data, panel) {\n                //note: bad copy sources fail silently\n                var toCopy = multipanel._dropData.filter(json => panel.model.contents.isCopyable(json));\n                multipanel._dropData = null;\n\n                var queue = new ajaxQueue.NamedAjaxQueue();\n                if (panel.model.contents.currentPage !== 0) {\n                    queue.add({\n                        name: \"fetch-front-page\",\n                        fn: function() {\n                            return panel.model.contents.fetchPage(0);\n                        }\n                    });\n                }\n                // need to reverse to better match expected order\n                // TODO: reconsider order in list-view._setUpItemViewListeners, dragstart (instead of here)\n                toCopy.reverse().forEach(content => {\n                    queue.add({\n                        name: `copy-${content.id}`,\n                        fn: function() {\n                            return panel.model.contents.copy(content);\n                        }\n                    });\n                });\n                queue.start();\n                queue.done(responses => {\n                    panel.model.fetch();\n                });\n            }\n        });\n    },\n\n    /** conv. fn to count the columns in columnMap */\n    columnMapLength: function() {\n        return Object.keys(this.columnMap).length;\n    },\n\n    /** return array of Columns filtered by filters and sorted to match the collection\n     *  @param: filters Function[] array of filter fns\n     */\n    sortedFilteredColumns: function(filters) {\n        filters = filters || this.filters;\n        if (!filters || !filters.length) {\n            return this.sortedColumns();\n        }\n        var multipanel = this;\n        return multipanel.sortedColumns().filter((column, index) => {\n            var filtered = column.currentHistory || _.every(filters.map(filter => filter.call(column)));\n            return filtered;\n        });\n    },\n\n    /** return array of Columns sorted to match the collection */\n    sortedColumns: function() {\n        var multipanel = this;\n        var sorted = this.collection.map((history, index) => multipanel.columnMap[history.id]);\n        return sorted;\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** Render this view, columns, and set up view plugins */\n    render: function render(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        var multipanel = this;\n\n        multipanel.log(`${multipanel}.render`);\n        multipanel.$el.html(multipanel.mainTemplate(multipanel));\n        multipanel.renderColumns(speed);\n\n        // set the columns to full height allowed and set up behaviors for thie multipanel\n        multipanel.setUpBehaviors();\n        //TODO: wrong - has to wait for columns to render\n        //  - create a column listener that fires this when all columns are rendered\n        multipanel.trigger(\"rendered\", multipanel);\n        return multipanel;\n    },\n\n    /** Render the columns and panels */\n    renderColumns: function renderColumns(speed) {\n        speed = _.isNumber(speed) ? speed : this.fxSpeed;\n        // console.log( 'renderColumns:', speed );\n        // render columns and track the total number rendered, firing an event when all are rendered\n        var self = this;\n        var sortedAndFiltered = self.sortedFilteredColumns();\n        // console.log( '\\t sortedAndFiltered:', sortedAndFiltered );\n        var $middle = self.$(\".middle\").empty();\n\n        self._addColumns(sortedAndFiltered, speed);\n        if (!self.collection.allFetched) {\n            $middle.append(self.loadingIndicatorTemplate(self));\n        }\n        //TODO: sorta - at least their fx queue has started the re-rendering\n        self.trigger(\"columns-rendered\", sortedAndFiltered, self);\n\n        if (self.datasetSearch && sortedAndFiltered.length <= 1) {\n        } else {\n            // check for in-view, hda lazy-loading if so\n            self.checkColumnsInView();\n            // the first, current column has position: fixed and flex css will not apply - adjust height manually\n            self._recalcFirstColumnHeight();\n        }\n        return sortedAndFiltered;\n    },\n\n    _addColumns: function(columns, speed) {\n        speed = _.isNumber(speed) ? speed : this.fxSpeed;\n        var $middle = this.$(\".middle\");\n\n        var numExisting = $middle.children(\".history-column\").length;\n        $middle.width(this._calcMiddleWidth(columns.length + numExisting));\n\n        columns.forEach((column, i) => {\n            column\n                .delegateEvents()\n                .render(speed)\n                .$el.appendTo($middle);\n        });\n    },\n\n    _calcMiddleWidth: function(numColumns) {\n        var preventStackWidthAdj = 16;\n        return (\n            numColumns * (this.options.columnWidth + this.options.columnGap) +\n            // last column gap\n            this.options.columnGap +\n            // the amount that safely prevents stacking of columns when adding a new one\n            preventStackWidthAdj\n        );\n    },\n\n    //TODO: combine the following two more sensibly\n    //TODO: could have HistoryContents.haveDetails return false\n    //      if column.model.contents.length === 0 && !column.model.get( 'empty' ) then just check that\n    /** Get the *summary* contents of a column's history (and details on any expanded contents),\n     *      queueing the ajax call and using a named queue to prevent the call being sent twice\n     */\n    queueHdaFetch: function queueHdaFetch(column) {\n        // console.log( column.model + '.contentsShown:', column.model.contentsShown() );\n        var contents = column.model.contents;\n        // console.log( 'queueHdaFetch:', column, column.model.get( 'contents_active' ) );\n        // if the history model says it has hdas but none are present, queue an ajax req for them\n        if (contents.length === 0 && column.model.contentsShown()) {\n            var fetchOptions = { silent: true };\n            var ids = _.values(contents.storage.allExpanded()).join();\n            if (ids) {\n                fetchOptions.details = ids;\n            }\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name: column.model.id,\n                fn: function() {\n                    return contents\n                        .fetchCurrentPage(fetchOptions)\n                        .done(() => {\n                            column.panel.renderItems();\n                        })\n                        .done(() => {\n                            if (!JOB_STATES_MODEL.FETCH_STATE_ON_ADD) {\n                                contents.jobStateSummariesCollection.fetch();\n                            }\n                        });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if (!this.hdaQueue.running) {\n                this.hdaQueue.start();\n            }\n        }\n    },\n\n    /** Get the *detailed* json for *all* of a column's history's contents - req'd for searching */\n    queueHdaFetchDetails: function(column) {\n        var contents = column.model.contents;\n        var needsContentsLoaded = contents.length === 0 && column.model.contentsShown();\n        if (needsContentsLoaded || !contents.haveDetails()) {\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name: column.model.id,\n                fn: function() {\n                    return contents.progressivelyFetchDetails().done(() => {\n                        column.panel._renderEmptyMessage();\n                    });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if (!this.hdaQueue.running) {\n                this.hdaQueue.start();\n            }\n        }\n    },\n\n    /** put a text msg in the header */\n    renderInfo: function(msg) {\n        return this.$(\".header .header-info\").text(msg);\n    },\n\n    // ------------------------------------------------------------------------ events/behaviors\n    events: {\n        // will move to the server root (gen. Analyze data)\n        \"click .done.btn\": \"close\",\n        // creates a new empty history and makes it current\n        \"click .create-new.btn\": \"create\",\n        \"click #include-deleted\": \"_clickToggleDeletedHistories\",\n        // these change the collection and column sort order\n        \"click .order .set-order\": \"_chooseOrder\",\n        \"click #toggle-deleted\": \"_clickToggleDeletedDatasets\",\n        \"click #toggle-hidden\": \"_clickToggleHiddenDatasets\"\n        //'dragstart .list-item .title-bar'                       : function( e ){ console.debug( 'ok' ); }\n    },\n\n    close: function(ev) {\n        //TODO: switch to pushState/router\n        window.location = Galaxy.root;\n    },\n\n    _clickToggleDeletedHistories: function(ev) {\n        this.toggleDeletedHistories($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    /** Include deleted histories in the collection */\n    toggleDeletedHistories: function(show) {\n        if (show) {\n            window.location = `${Galaxy.root}history/view_multiple?include_deleted_histories=True`;\n        } else {\n            window.location = `${Galaxy.root}history/view_multiple`;\n        }\n    },\n\n    _clickToggleDeletedDatasets: function(ev) {\n        this.toggleDeletedDatasets($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    toggleDeletedDatasets: function(show) {\n        show = show !== undefined ? show : false;\n        var multipanel = this;\n        multipanel.sortedFilteredColumns().forEach((column, i) => {\n            _.delay(() => {\n                column.panel.toggleShowDeleted(show, false);\n            }, i * 200);\n        });\n    },\n\n    _clickToggleHiddenDatasets: function(ev) {\n        this.toggleHiddenDatasets($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    toggleHiddenDatasets: function(show) {\n        show = show !== undefined ? show : false;\n        var multipanel = this;\n        multipanel.sortedFilteredColumns().forEach((column, i) => {\n            _.delay(() => {\n                column.panel.toggleShowHidden(show, false);\n            }, i * 200);\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    _chooseOrder: function(ev) {\n        var multipanel = this;\n        var collection = multipanel.collection;\n        var orderKey = $(ev.currentTarget).data(\"order\");\n        // set the sort order text also\n        multipanel.$(\".current-order\").text(multipanel.orderDescriptions[orderKey]);\n        multipanel.toggleOptionsPopover();\n        // set the order and re-fetch using the new order, saving the current history as the first\n        collection.setOrder(orderKey);\n        var currentHistoryModel = collection.slice(0, 1);\n        collection.fetchFirst().done(() => {\n            collection.unshift(currentHistoryModel, {\n                silent: true\n            });\n            multipanel.createColumns();\n            // need to clear this or previously fetched contents won't refetch now (bc of named queue)\n            multipanel.hdaQueue.clear();\n            multipanel.render();\n        });\n        multipanel.once(\"columns-rendered\", multipanel._scrollLeft);\n        //TODO: check allFetched and do not reset if so - just sort instead\n    },\n\n    /** scroll the column container right or left */\n    _scrollLeft: function(val) {\n        val = _.isNumber(val) ? val : 0;\n        this.$(\".outer-middle\").scrollLeft(val);\n    },\n\n    /** Set up any view plugins */\n    setUpBehaviors: function() {\n        var multipanel = this;\n        multipanel._moreOptionsPopover();\n\n        // input to search histories\n        multipanel.$(\"#search-histories\").searchInput({\n            name: \"search-histories\",\n            placeholder: _l(\"search histories\"),\n\n            onfirstsearch: function(searchFor) {\n                multipanel.$(\"#search-histories\").searchInput(\"toggle-loading\");\n                multipanel.renderInfo(_l(\"loading all histories for search\"));\n                multipanel.collection.fetchAll().done(() => {\n                    multipanel.$(\"#search-histories\").searchInput(\"toggle-loading\");\n                    multipanel.renderInfo(\"\");\n                });\n            },\n            onsearch: function(searchFor) {\n                multipanel.historySearch = searchFor;\n                multipanel.filters = [\n                    function() {\n                        return this.model.matchesAll(multipanel.historySearch);\n                    }\n                ];\n                multipanel.renderColumns(0);\n            },\n            onclear: function(searchFor) {\n                multipanel.historySearch = null;\n                //TODO: remove specifically not just reset\n                multipanel.filters = [];\n                multipanel.renderColumns(0);\n            }\n        });\n\n        // input to search datasets\n        multipanel.$(\"#search-datasets\").searchInput({\n            name: \"search-datasets\",\n            placeholder: _l(\"search all datasets\"),\n\n            onfirstsearch: function(searchFor) {\n                multipanel.hdaQueue.clear();\n                multipanel.$(\"#search-datasets\").searchInput(\"toggle-loading\");\n                multipanel.datasetSearch = searchFor;\n                multipanel.sortedFilteredColumns().forEach(column => {\n                    column.panel.searchItems(searchFor);\n                    // load details for them that need\n                    multipanel.queueHdaFetchDetails(column);\n                });\n                multipanel.hdaQueue.progress(progress => {\n                    multipanel.renderInfo([_l(\"searching\"), progress.curr + 1, _l(\"of\"), progress.total].join(\" \"));\n                });\n                multipanel.hdaQueue.deferred.done(() => {\n                    multipanel.renderInfo(\"\");\n                    multipanel.$(\"#search-datasets\").searchInput(\"toggle-loading\");\n                });\n            },\n            onsearch: function(searchFor) {\n                multipanel.datasetSearch = searchFor;\n                multipanel.sortedFilteredColumns().forEach(column => {\n                    column.panel.searchItems(searchFor);\n                });\n            },\n            onclear: function(searchFor) {\n                multipanel.datasetSearch = null;\n                multipanel.sortedFilteredColumns().forEach(column => {\n                    column.panel.clearSearch();\n                });\n            }\n        });\n\n        // resize first (fixed position) column on page resize\n        $(window).resize(() => {\n            multipanel._recalcFirstColumnHeight();\n        });\n\n        // when scrolling - check for histories now in view: they will fire 'in-view' and queueHdaLoading if necc.\n        //TODO:?? might be able to simplify and not use pub-sub\n        var debouncedInView = _.debounce(function _debouncedInner() {\n            var viewport = multipanel._viewport();\n            multipanel.checkColumnsInView(viewport);\n            multipanel.checkForEndOfScroll(viewport);\n        }, 100);\n        this.$(\".middle\")\n            .parent()\n            .scroll(debouncedInView);\n    },\n\n    /** create the options popover */\n    _moreOptionsPopover: function() {\n        return this.$(\".open-more-options.btn\").popover({\n            container: \".header\",\n            placement: \"bottom\",\n            html: true,\n            content: $(this.optionsPopoverTemplate(this))\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    toggleOptionsPopover: function(ev) {\n        // hide seems broken in our version\n        this.$(\".open-more-options.btn\").popover(\"toggle\");\n    },\n\n    /** Adjust the height of the first, current column since flex-boxes won't work with fixed postiion elements */\n    _recalcFirstColumnHeight: function() {\n        var $firstColumn = this.$(\".history-column\").first();\n        var middleHeight = this.$(\".middle\").height();\n        var controlHeight = $firstColumn.find(\".panel-controls\").height();\n        $firstColumn\n            .height(middleHeight)\n            .find(\".inner\")\n            .height(middleHeight - controlHeight);\n    },\n\n    /** Get the left and right pixel coords of the middle element */\n    _viewport: function() {\n        var $outerMiddle = this.$(\".middle\").parent();\n        var viewLeft = $outerMiddle.offset().left;\n        var width = $outerMiddle.width();\n        return {\n            left: viewLeft,\n            right: viewLeft + width\n        };\n    },\n\n    /** returns the columns currently in the viewport */\n    columnsInView: function(viewport) {\n        //TODO: uses offset which is render intensive\n        //TODO: 2N - could use arg filter (sortedFilteredColumns( filter )) instead\n        var vp = viewport || this._viewport();\n        return this.sortedFilteredColumns().filter(column => column.currentHistory || column.inView(vp.left, vp.right));\n    },\n\n    //TODO: sortByInView - return cols in view, then others\n    /** trigger in-view from columns in-view */\n    checkColumnsInView: function() {\n        //TODO: assbackward - don't fire from the column, fire from here and listen from here\n        this.columnsInView().forEach(column => {\n            column.trigger(\"in-view\", column);\n        });\n    },\n\n    /** is the middle, horizontally scrolling section scrolled fully to the right? */\n    checkForEndOfScroll: function(viewport) {\n        viewport = viewport || this._viewport();\n        var END_PADDING = 16;\n        var $middle = this.$(\".middle\");\n        var scrollRight = $middle.parent().scrollLeft() + viewport.right;\n        if (scrollRight >= $middle.width() - END_PADDING) {\n            this.trigger(\"end-of-scroll\");\n        }\n    },\n\n    /** Show and enable the current columns drop target */\n    currentColumnDropTargetOn: function() {\n        var currentColumn = this.columnMap[this.collection.currentHistoryId];\n        if (!currentColumn) {\n            return;\n        }\n        //TODO: fix this - shouldn't need monkeypatch\n        currentColumn.panel.dataDropped = data => {};\n        currentColumn.panel.dropTargetOn();\n    },\n\n    /** Hide and disable the current columns drop target */\n    currentColumnDropTargetOff: function() {\n        var currentColumn = this.columnMap[this.collection.currentHistoryId];\n        if (!currentColumn) {\n            return;\n        }\n        currentColumn.panel.dataDropped = HISTORY_VIEW_EDIT.HistoryViewEdit.prototype.dataDrop;\n        // slight override of dropTargetOff to not erase drop-target-help\n        currentColumn.panel.dropTarget = false;\n        currentColumn.panel.$(\".history-drop-target\").remove();\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString: function() {\n        return `MultiPanelColumns(${this.columns ? this.columns.length : 0})`;\n    },\n\n    // ------------------------------------------------------------------------ templates\n    mainTemplate: _.template(\n        [\n            '<div class=\"header flex-column-container\">',\n            '<div class=\"control-column control-column-left flex-column\">',\n            '<button class=\"done btn btn-default\" tabindex=\"1\">',\n            _l(\"Done\"),\n            \"</button>\",\n            '<div id=\"search-histories\" class=\"search-control\"></div>',\n            '<div id=\"search-datasets\" class=\"search-control\"></div>',\n            '<a class=\"open-more-options btn btn-default\" tabindex=\"3\">',\n            '<span class=\"fa fa-ellipsis-h\"></span>',\n            \"</a>\",\n            \"</div>\",\n            // feedback\n            '<div class=\"control-column control-column-center flex-column\">',\n            '<div class=\"header-info\">',\n            \"</div>\",\n            \"</div>\",\n            '<div class=\"control-column control-column-right flex-column\">',\n            '<button class=\"create-new btn btn-default\" tabindex=\"4\">',\n            _l(\"Create new\"),\n            \"</button> \",\n            \"</div>\",\n            \"</div>\",\n            // middle - where the columns go\n            '<div class=\"outer-middle flex-row flex-row-container\">',\n            '<div class=\"middle flex-column-container flex-row\"></div>',\n            \"</div>\",\n            // footer\n            '<div class=\"footer flex-column-container\"></div>'\n        ].join(\"\"),\n        { variable: \"view\" }\n    ),\n\n    loadingIndicatorTemplate: _.template(\n        [\n            '<div class=\"histories-loading-indicator\">',\n            '<span class=\"fa fa-spin fa-spinner\"></span>',\n            _l(\"Loading histories\"),\n            \"...\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"view\" }\n    ),\n\n    orderDescriptions: {\n        update_time: _l(\"most recent first\"),\n        \"update_time-asc\": _l(\"least recent first\"),\n        name: _l(\"name, a to z\"),\n        \"name-dsc\": _l(\"name, z to a\"),\n        size: _l(\"size, large to small\"),\n        \"size-asc\": _l(\"size, small to large\")\n    },\n\n    optionsPopoverTemplate: _.template(\n        [\n            '<div class=\"more-options\">',\n            '<div class=\"order btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n            `${_l(\"Order histories by\")} `,\n            '<span class=\"current-order\"><%- view.orderDescriptions[ view.collection.order ] %></span> ',\n            '<span class=\"caret\"></span>',\n            \"</button>\",\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n            \"<% _.each( view.orderDescriptions, function( text, order ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"set-order\" data-order=\"<%- order %>\">',\n            \"<%- text %>\",\n            \"</a></li>\",\n            \"<% }); %>\",\n            \"</ul>\",\n            \"</div>\",\n\n            '<div class=\"checkbox\"><label><input id=\"include-deleted\" type=\"checkbox\"',\n            '<%= view.collection.includeDeleted? \" checked\" : \"\" %>>',\n            _l(\"Include deleted histories\"),\n            \"</label></div>\",\n\n            \"<hr />\",\n\n            '<div class=\"checkbox\"><label><input id=\"toggle-deleted\" type=\"checkbox\">',\n            _l(\"Include deleted datasets\"),\n            \"</label></div>\",\n            '<div class=\"checkbox\"><label><input id=\"toggle-hidden\" type=\"checkbox\">',\n            _l(\"Include hidden datasets\"),\n            \"</label></div>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"view\" }\n    )\n});\n\n//==============================================================================\nexport default {\n    MultiPanelColumns: MultiPanelColumns\n};\n"]}
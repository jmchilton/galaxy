{"version":3,"sources":["mvc/history/history-view.js"],"names":["_super","_listView2","default","ModelListPanel","HistoryView","extend","_logNamespace","HDAViewClass","_hdaLi2","HDAListItemView","HDCAViewClass","_hdcaLi2","HDCAListItemView","collectionClass","_historyContents2","HistoryContents","modelCollectionKey","tagName","className","prototype","emptyMsg","_localization2","noneFoundMsg","attributes","initialize","call","this","linkTarget","model","freeModel","stopPolling","_setUpListeners","_createDefaultCollection","error","xhr","options","msg","details","errorHandler","views:ready view:attached view:removed","view","_renderSelectButton","view:attached","scrollTo","loadHistory","historyId","contentsOptions","_this","_","silent","info","setModel","_historyModel2","History","id","on","fetchWithContents","always","render","trigger","refreshContents","refresh","$","when","_setUpCollectionListeners","collection","fetching-more","_toggleContentsLoadingIndicator","hide","fetching-more-done","_showLoadingIndicator","speed","callback","$indicator","$el","html","text","slideDown","isUndefined","fxSpeed","_hideLoadingIndicator","slideUp","_buildNewRender","$emptyMessage","$newRender","$where","length","views","hideSelectors","remove","$existing","find","title","classes","faIcon","prependTo","_renderEmptyMessage","$whereTo","$emptyMsg","multiselectActions","get","active","empty","searchFor","contents","haveSearchDetails","$list","renderItems","models","_filterCollection","_renderPagination","_renderSomeItems","toggle","$paginationControls","pagination","current","currentPage","last","getLastPage","tooltip","_this2","map","m","_createItemView","_renderItemView$el","_filterItem","includeHidden","hidden","includeDeleted","isDeletedOrPurged","_getItemViewClass","contentType","TypeError","_getItemViewOptions","expanded","storage","isExpanded","ownedByCurrUser","hasUser","panel","_setUpItemViewListeners","v","collapsed","listenTo","removeExpanded","collapseAll","clearExpanded","getSelectedModels","events","click .show-selectors-btn","click > .controls .prev","click > .controls .next","change > .controls .pages","click .messages [class$=message]","_clickPrevPage","ev","fetchPrevPage","_clickNextPage","page","fetchNextPage","fetchPage","toggleShowDeleted","show","undefined","setIncludeDeleted","toggleShowHidden","store","setIncludeHidden","fetchCurrentPage","renderAll","_firstSearch","log","searchItems","searchInput","progressivelyFetchDetails","progress","response","limit","offset","_this3","inputSelector","done","clearSearch","_this4","val","status","readyState","isString","message","_errorModal2","errorModal","badGatewayErrorModal","ajaxErrorModal","clearMessages","$messages","children","fadeOut","scrollToHid","hid","scrollToItem","first","viewsWhereModel","ordinalIndicator","numStr","number","charAt","toString","templates","controlsTemplate","_baseMvc2","wrapTemplate","el","controls","paginationTemplate","clone"],"mappings":"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","file":"../../../scripts/mvc/history/history-view.js","sourcesContent":["import LIST_VIEW from \"mvc/list/list-view\";\nimport HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_CONTENTS from \"mvc/history/history-contents\";\nimport HISTORY_PREFS from \"mvc/history/history-preferences\";\nimport HDA_LI from \"mvc/history/hda-li\";\nimport HDCA_LI from \"mvc/history/hdca-li\";\nimport USER from \"mvc/user/user-model\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/search-input\";\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class  non-editable, read-only View/Controller for a history model.\n *  Allows:\n *      changing the loaded history\n *      displaying data, info, and download\n *      tracking history attrs: size, tags, annotations, name, etc.\n *  Does not allow:\n *      changing the name\n */\nvar _super = LIST_VIEW.ModelListPanel;\nvar HistoryView = _super.extend(\n    /** @lends HistoryView.prototype */ {\n        _logNamespace: \"history\",\n\n        /** class to use for constructing the HDA views */\n        HDAViewClass: HDA_LI.HDAListItemView,\n        /** class to use for constructing the HDCA views */\n        HDCAViewClass: HDCA_LI.HDCAListItemView,\n        /** class to used for constructing collection of sub-view models */\n        collectionClass: HISTORY_CONTENTS.HistoryContents,\n        /** key of attribute in model to assign to this.collection */\n        modelCollectionKey: \"contents\",\n\n        tagName: \"div\",\n        className: `${_super.prototype.className} history-panel`,\n\n        /** string to display when the collection is empty */\n        emptyMsg: _l(\"This history is empty\"),\n        /** displayed when no items match the search terms */\n        noneFoundMsg: _l(\"No matching datasets found\"),\n        /** string used for search placeholder */\n        searchPlaceholder: _l(\"search datasets\"),\n\n        // ......................................................................... SET UP\n        /** Set up the view, bind listeners.\n         *  @param {Object} attributes optional settings for the panel\n         */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n            // ---- instance vars\n            // control contents/behavior based on where (and in what context) the panel is being used\n            /** where should pages from links be displayed? (default to new tab/window) */\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n        },\n\n        /** create and return a collection for when none is initially passed */\n        _createDefaultCollection: function() {\n            // override\n            return new this.collectionClass([], {\n                history: this.model\n            });\n        },\n\n        /** In this override, clear the update timer on the model */\n        freeModel: function() {\n            _super.prototype.freeModel.call(this);\n            if (this.model) {\n                this.model.stopPolling();\n            }\n            return this;\n        },\n\n        /** create any event listeners for the panel\n         *  @fires: rendered:initial    on the first render\n         *  @fires: empty-history       when switching to a history with no contents or creating a new history\n         */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            this.on({\n                error: function(model, xhr, options, msg, details) {\n                    this.errorHandler(model, xhr, options, msg, details);\n                },\n                \"views:ready view:attached view:removed\": function(view) {\n                    this._renderSelectButton();\n                },\n                \"view:attached\": function(view) {\n                    this.scrollTo(0);\n                }\n            });\n            // this.on( 'all', function(){ console.debug( arguments ); });\n        },\n\n        // ------------------------------------------------------------------------ loading history/hda models\n        /** load the history with the given id then it's contents, sending ajax options to both */\n        loadHistory: function(historyId, options, contentsOptions) {\n            contentsOptions = _.extend(contentsOptions || { silent: true });\n            this.info(\"loadHistory:\", historyId, options, contentsOptions);\n            this.setModel(new HISTORY_MODEL.History({ id: historyId }));\n\n            contentsOptions.silent = true;\n            this.trigger(\"loading\");\n            return this.model.fetchWithContents(options, contentsOptions).always(() => {\n                this.render();\n                this.trigger(\"loading-done\");\n            });\n        },\n\n        /** convenience alias to the model. Updates the item list only (not the history) */\n        refreshContents: function(options) {\n            if (this.model) {\n                return this.model.refresh(options);\n            }\n            // may have callbacks - so return an empty promise\n            return $.when();\n        },\n\n        /** Override to reset web storage when the id changes (since it needs the id) */\n        _setUpCollectionListeners: function() {\n            _super.prototype._setUpCollectionListeners.call(this);\n            return this.listenTo(this.collection, {\n                // 'all' : function(){ console.log( this.collection + ':', arguments ); },\n                \"fetching-more\": function() {\n                    this._toggleContentsLoadingIndicator(true);\n                    this.$emptyMessage().hide();\n                },\n                \"fetching-more-done\": function() {\n                    this._toggleContentsLoadingIndicator(false);\n                }\n            });\n        },\n\n        // ------------------------------------------------------------------------ panel rendering\n        /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n        _showLoadingIndicator: function(msg, speed, callback) {\n            var $indicator = $('<div class=\"loading-indicator\"/>');\n            this.$el.html($indicator.text(msg).slideDown(!_.isUndefined(speed) ? speed : this.fxSpeed));\n        },\n\n        /** hide the loading indicator */\n        _hideLoadingIndicator: function(speed) {\n            // make speed a bit slower to compensate for slow rendering of up to 500 contents\n            this.$(\".loading-indicator\").slideUp(!_.isUndefined(speed) ? speed : this.fxSpeed + 200, function() {\n                $(this).remove();\n            });\n        },\n\n        /** In this override, add a btn to toggle the selectors */\n        _buildNewRender: function() {\n            var $newRender = _super.prototype._buildNewRender.call(this);\n            this._renderSelectButton($newRender);\n            return $newRender;\n        },\n\n        /** button for starting select mode */\n        _renderSelectButton: function($where) {\n            $where = $where || this.$el;\n            // do not render selector option if no actions\n            if (!this.multiselectActions().length) {\n                return null;\n            }\n            // do not render (and remove even) if nothing to select\n            if (!this.views.length) {\n                this.hideSelectors();\n                $where.find(\".controls .actions .show-selectors-btn\").remove();\n                return null;\n            }\n            // don't bother rendering if there's one already\n            var $existing = $where.find(\".controls .actions .show-selectors-btn\");\n            if ($existing.length) {\n                return $existing;\n            }\n\n            return faIconButton({\n                title: _l(\"Operations on multiple datasets\"),\n                classes: \"show-selectors-btn\",\n                faIcon: \"fa-check-square-o\"\n            }).prependTo($where.find(\".controls .actions\"));\n        },\n\n        /** override to avoid showing intial empty message using contents_active */\n        _renderEmptyMessage: function($whereTo) {\n            var $emptyMsg = this.$emptyMessage($whereTo);\n            var empty = this.model.get(\"contents_active\").active <= 0;\n            if (empty) {\n                return $emptyMsg\n                    .empty()\n                    .append(this.emptyMsg)\n                    .show();\n            } else if (this.searchFor && this.model.contents.haveSearchDetails() && !this.views.length) {\n                return $emptyMsg\n                    .empty()\n                    .append(this.noneFoundMsg)\n                    .show();\n            }\n            $emptyMsg.hide();\n            return $();\n        },\n\n        /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n        $scrollContainer: function($where) {\n            // override or set via attributes.$scrollContainer\n            return this.$list($where);\n        },\n\n        // ------------------------------------------------------------------------ subviews\n        _toggleContentsLoadingIndicator: function(show) {\n            if (!show) {\n                this.$list()\n                    .find(\".contents-loading-indicator\")\n                    .remove();\n            } else {\n                this.$list().html(\n                    '<div class=\"contents-loading-indicator\">' + '<span class=\"fa fa-2x fa-spinner fa-spin\"/></div>'\n                );\n            }\n        },\n\n        /** override to render pagination also */\n        renderItems: function($whereTo) {\n            // console.log( this + '.renderItems-----------------', new Date() );\n            $whereTo = $whereTo || this.$el;\n            var $list = this.$list($whereTo);\n\n            // TODO: bootstrap hack to remove orphaned tooltips\n            $(\".tooltip\").remove();\n\n            $list.empty();\n            this.views = [];\n\n            var models = this._filterCollection();\n            if (models.length) {\n                this._renderPagination($whereTo);\n                this.views = this._renderSomeItems(models, $list);\n            } else {\n                // TODO: consolidate with _renderPagination above by (???) passing in models/length?\n                $whereTo.find(\"> .controls .list-pagination\").empty();\n            }\n            this._renderEmptyMessage($whereTo).toggle(!models.length);\n\n            this.trigger(\"views:ready\", this.views);\n            return this.views;\n        },\n\n        /** render pagination controls if not searching and contents says we're paginating */\n        _renderPagination: function($whereTo) {\n            var $paginationControls = $whereTo.find(\"> .controls .list-pagination\");\n            if (this.searchFor || !this.model.contents.shouldPaginate()) return $paginationControls.empty();\n\n            $paginationControls.html(\n                this.templates.pagination(\n                    {\n                        // pagination is 1-based for the user\n                        current: this.model.contents.currentPage + 1,\n                        last: this.model.contents.getLastPage() + 1\n                    },\n                    this\n                )\n            );\n            $paginationControls.find(\"select.pages\").tooltip();\n            return $paginationControls;\n        },\n\n        /** render a subset of the entire collection (client-side pagination) */\n        _renderSomeItems: function(models, $list) {\n            var views = [];\n            $list.append(\n                models.map(m => {\n                    var view = this._createItemView(m);\n                    views.push(view);\n                    return this._renderItemView$el(view);\n                })\n            );\n            return views;\n        },\n\n        // ------------------------------------------------------------------------ sub-views\n        /** in this override, check if the contents would also display based on includeDeleted/hidden */\n        _filterItem: function(model) {\n            var contents = this.model.contents;\n            return (\n                (contents.includeHidden || !model.hidden()) &&\n                (contents.includeDeleted || !model.isDeletedOrPurged()) &&\n                _super.prototype._filterItem.call(this, model)\n            );\n        },\n\n        /** In this override, since history contents are mixed,\n         *      get the appropo view class based on history_content_type\n         */\n        _getItemViewClass: function(model) {\n            var contentType = model.get(\"history_content_type\");\n            switch (contentType) {\n                case \"dataset\":\n                    return this.HDAViewClass;\n                case \"dataset_collection\":\n                    return this.HDCAViewClass;\n            }\n            throw new TypeError(`Unknown history_content_type: ${contentType}`);\n        },\n\n        /** in this override, add a linktarget, and expand if id is in web storage */\n        _getItemViewOptions: function(model) {\n            var options = _super.prototype._getItemViewOptions.call(this, model);\n            return _.extend(options, {\n                linkTarget: this.linkTarget,\n                expanded: this.model.contents.storage.isExpanded(model.id),\n                hasUser: this.model.ownedByCurrUser()\n            });\n        },\n\n        /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            _super.prototype._setUpItemViewListeners.call(panel, view);\n            //TODO: send from content view: this.model.collection.storage.addExpanded\n            // maintain a list of items whose bodies are expanded\n            return panel.listenTo(view, {\n                expanded: function(v) {\n                    panel.model.contents.storage.addExpanded(v.model);\n                },\n                collapsed: function(v) {\n                    panel.model.contents.storage.removeExpanded(v.model);\n                }\n            });\n        },\n\n        /** override to remove expandedIds from webstorage */\n        collapseAll: function() {\n            this.model.contents.storage.clearExpanded();\n            _super.prototype.collapseAll.call(this);\n        },\n\n        // ------------------------------------------------------------------------ selection\n        /** Override to correctly set the historyId of the new collection */\n        getSelectedModels: function() {\n            var collection = _super.prototype.getSelectedModels.call(this);\n            collection.historyId = this.collection.historyId;\n            return collection;\n        },\n\n        // ------------------------------------------------------------------------ panel events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .show-selectors-btn\": \"toggleSelectors\",\n            \"click > .controls .prev\": \"_clickPrevPage\",\n            \"click > .controls .next\": \"_clickNextPage\",\n            \"change > .controls .pages\": \"_changePageSelect\",\n            // allow (error) messages to be clicked away\n            \"click .messages [class$=message]\": \"clearMessages\"\n        }),\n\n        _clickPrevPage: function(ev) {\n            this.model.stopPolling();\n            this.model.contents.fetchPrevPage();\n        },\n\n        _clickNextPage: function(ev) {\n            this.model.stopPolling();\n            this.model.contents.fetchNextPage();\n        },\n\n        _changePageSelect: function(ev) {\n            this.model.stopPolling();\n            var page = $(ev.currentTarget).val();\n            this.model.contents.fetchPage(page);\n        },\n\n        /** Toggle and store the deleted visibility and re-render items\n         * @returns {Boolean} new setting\n         */\n        toggleShowDeleted: function(show, options) {\n            show = show !== undefined ? show : !this.model.contents.includeDeleted;\n            var contents = this.model.contents;\n            contents.setIncludeDeleted(show, options);\n            this.trigger(\"show-deleted\", show);\n\n            contents.fetchCurrentPage({ renderAll: true });\n            return show;\n        },\n\n        /** Toggle and store whether to render explicity hidden contents\n         * @returns {Boolean} new setting\n         */\n        toggleShowHidden: function(show, store, options) {\n            // console.log( 'toggleShowHidden', show, store );\n            show = show !== undefined ? show : !this.model.contents.includeHidden;\n            var contents = this.model.contents;\n            contents.setIncludeHidden(show, options);\n            this.trigger(\"show-hidden\", show);\n\n            contents.fetchCurrentPage({ renderAll: true });\n            return show;\n        },\n\n        /** On the first search, if there are no details - load them, then search */\n        _firstSearch: function(searchFor) {\n            var inputSelector = \"> .controls .search-input\";\n            this.log(\"onFirstSearch\", searchFor);\n\n            // if the contents already have enough details to search, search and return now\n            if (this.model.contents.haveSearchDetails()) {\n                this.searchItems(searchFor);\n                return;\n            }\n\n            // otherwise, load the details progressively here\n            this.$(inputSelector).searchInput(\"toggle-loading\");\n            // set this now so that only results will show during progress\n            this.searchFor = searchFor;\n            var xhr = this.model.contents\n                .progressivelyFetchDetails({ silent: true })\n                .progress((response, limit, offset) => {\n                    this.renderItems();\n                    this.trigger(\"search:loading-progress\", limit, offset);\n                })\n                .always(() => {\n                    this.$el.find(inputSelector).searchInput(\"toggle-loading\");\n                })\n                .done(() => {\n                    this.searchItems(searchFor, \"force\");\n                });\n        },\n\n        /** clear the search filters and show all views that are normally shown */\n        clearSearch: function(searchFor) {\n            if (!this.searchFor) return this;\n            //this.log( 'onSearchClear', this );\n            this.searchFor = \"\";\n            this.trigger(\"search:clear\", this);\n            this.$(\"> .controls .search-query\").val(\"\");\n            // NOTE: silent + render prevents collection update event with merge only\n            // - which causes an empty page due to event handler above\n            this.model.contents.fetchCurrentPage({ silent: true }).done(() => {\n                this.renderItems();\n            });\n            return this;\n        },\n\n        // ........................................................................ error handling\n        /** Event handler for errors (from the panel, the history, or the history's contents)\n         *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n         *  @param {Model or View} model    the (Backbone) source of the error\n         *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n         *  @param {Object} options         the options map commonly used with bbone ajax\n         */\n        errorHandler: function(model, xhr, options) {\n            //TODO: to mixin or base model\n            // interrupted ajax or no connection\n            if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n                // return ERROR_MODAL.offlineErrorModal();\n                // fail silently\n                return;\n            }\n            // otherwise, leave something to report in the console\n            this.error(model, xhr, options);\n            // and feedback to a modal\n            // if sent two strings (and possibly details as 'options'), use those as message and title\n            if (_.isString(model) && _.isString(xhr)) {\n                var message = model;\n                var title = xhr;\n                return ERROR_MODAL.errorModal(message, title, options);\n            }\n            // bad gateway\n            // TODO: possibly to global handler\n            if (xhr && xhr.status === 502) {\n                return ERROR_MODAL.badGatewayErrorModal();\n            }\n            return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n        },\n\n        /** Remove all messages from the panel. */\n        clearMessages: function(ev) {\n            var $target = !_.isUndefined(ev) ? $(ev.currentTarget) : this.$messages().children('[class$=\"message\"]');\n            $target.fadeOut(this.fxSpeed, function() {\n                $(this).remove();\n            });\n            return this;\n        },\n\n        // ........................................................................ scrolling\n        /** Scrolls the panel to show the content sub-view with the given hid.\n         *  @param {Integer} hid    the hid of item to scroll into view\n         *  @returns {HistoryView} the panel\n         */\n        scrollToHid: function(hid) {\n            return this.scrollToItem(_.first(this.viewsWhereModel({ hid: hid })));\n        },\n\n        // ........................................................................ misc\n        /** utility for adding -st, -nd, -rd, -th to numbers */\n        ordinalIndicator: function(number) {\n            var numStr = `${number}`;\n            switch (numStr.charAt(numStr.length - 1)) {\n                case \"1\":\n                    return `${numStr}st`;\n                case \"2\":\n                    return `${numStr}nd`;\n                case \"3\":\n                    return `${numStr}rd`;\n                default:\n                    return `${numStr}th`;\n            }\n        },\n\n        /** Return a string rep of the history */\n        toString: function() {\n            return `HistoryView(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n//------------------------------------------------------------------------------ TEMPLATES\nHistoryView.prototype.templates = (() => {\n    var mainTemplate = () =>\n        `<div>\n            <div class=\"controls\"></div>\n            <ul class=\"list-items\"></ul>\n            <div class=\"empty-message infomessagesmall\"></div>',\n        </div>`;\n\n    var controlsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"controls\">',\n            '<div class=\"title\">',\n            '<div class=\"name\"><%- history.name %></div>',\n            \"</div>\",\n            '<div class=\"subtitle\"></div>',\n            '<div class=\"history-size\"><%- history.nice_size %></div>',\n\n            '<div class=\"actions\"></div>',\n\n            '<div class=\"messages\">',\n            \"<% if( history.deleted && history.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been purged and deleted\"),\n            \"</div>\",\n            \"<% } else if( history.deleted ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been deleted\"),\n            \"</div>\",\n            \"<% } else if( history.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been purged\"),\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( history.message ){ %>\",\n            // should already be localized\n            '<div class=\"<%= history.message.level || \"info\" %>messagesmall\">',\n            \"<%= history.message.text %>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"</div>\",\n\n            // add tags and annotations\n            '<div class=\"tags-display\"></div>',\n            '<div class=\"annotation-display\"></div>',\n\n            '<div class=\"search\">',\n            '<div class=\"search-input\"></div>',\n            \"</div>\",\n\n            '<div class=\"list-actions\">',\n            '<div class=\"btn-group\">',\n            '<button class=\"select-all btn btn-default\"',\n            'data-mode=\"select\">',\n            _l(\"All\"),\n            \"</button>\",\n            '<button class=\"deselect-all btn btn-default\"',\n            'data-mode=\"select\">',\n            _l(\"None\"),\n            \"</button>\",\n            \"</div>\",\n            '<div class=\"list-action-menu btn-group\">',\n            \"</div>\",\n            \"</div>\",\n            '<div class=\"list-pagination form-inline\"></div>',\n            \"</div>\"\n        ],\n        \"history\"\n    );\n\n    var paginationTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<button class=\"prev\" <%- pages.current === 1 ? \"disabled\" : \"\" %>>previous</button>',\n            '<select class=\"pages form-control\" ',\n            'title=\"',\n            _l(\"Click to open and select a page. Begin typing a page number to select it\"),\n            '\">',\n            \"<% _.range( 1, pages.last + 1 ).forEach( function( i ){ %>\",\n            '<option value=\"<%- i - 1 %>\" <%- i === pages.current ? \"selected\" : \"\" %>>',\n            \"<%- view.ordinalIndicator( i ) %> of <%- pages.last %> pages\",\n            \"</option>\",\n            \"<% }); %>\",\n            \"</select>\",\n            '<button class=\"next\" <%- pages.current === pages.last ? \"disabled\" : \"\" %>>next</button>'\n        ],\n        \"pages\"\n    );\n\n    return _.extend(_.clone(_super.prototype.templates), {\n        el: mainTemplate,\n        controls: controlsTemplate,\n        pagination: paginationTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    HistoryView: HistoryView\n};\n"]}
{"version":3,"sources":["mvc/history/job-states-model.js"],"names":["Backbone","NON_TERMINAL_STATES","ERROR_STATES","JobStatesSummary","Model","extend","url","Galaxy","root","this","attributes","history_id","collection_id","hasDetails","has","new","get","errored","anyWithStates","states","anyWithState","queryState","UPDATE_DELAY","queryStates","FETCH_STATE_ON_ADD","BATCH_FETCH_STATE","index","numWithStates","count","numInError","running","terminal","jobCount","toString","JobStatesSummaryCollection","Collection","model","initialize","updateTimeoutId","anyNonTerminal","active","nonTerminalModels","models","filter","ids","map","summary","types","historyId","monitor","add","clearUpdateTimeout","_delayThenMonitorAgain","_this","setTimeout","fetch","AjaxQueue","updateFunctions","length","remove","done","clearTimeout"],"mappings":"uKAAYA,oNAKRC,GAAuB,MAAO,SAAU,WACxCC,GAAgB,QAAS,WAKzBC,EAAmBH,EAASI,MAAMC,QAClCC,IAAK,WACD,OAAUC,OAAOC,KAAjB,iBAAsCC,KAAKC,WAAWC,WAAtD,iCACIF,KAAKC,WAAWE,cADpB,iBAKJC,WAAY,WACR,OAAOJ,KAAKK,IAAI,oBAGpBC,IAAK,WACD,OAAQN,KAAKI,cAA+C,OAA/BJ,KAAKO,IAAI,oBAG1CC,QAAS,WACL,MAAuC,UAAhCR,KAAKO,IAAI,oBAAkCP,KAAKS,cAAchB,IAGzEiB,OAAQ,WACJ,OAAOV,KAAKO,IAAI,eA5BxBI,aAAA,SAAAC,GACIC,OAAAA,KAAAA,SAAJD,IAAA,GAAA,GAGAH,cAAA,SAAAK,GACIC,IAAAA,EAAAA,KAAAA,SACAC,IAAAA,IAAAA,KAAAA,EAgCQ,IAAKN,EAAOI,EAAYG,KAAW,GAAK,EA9BhDvB,OAAAA,EAKC,OALwC,GAQrCwB,cAAO,SAASJ,GACnB,IATwCJ,EAAAV,KAAAU,SAuCjCS,EAAQ,EA5BhBb,IAAK,IAAAW,KAAAH,EACDK,GAAQT,EAAKN,EAANa,KAA+B,EA+BtC,OAAOE,GA1BVC,WAjBwC,WA+CrC,OAAOpB,KAAKkB,cAAczB,IA1B7B4B,QArBwC,WAmDrC,OAAOrB,KAAKW,aAAa,YA1B5BW,SAzBwC,WAuDrC,OAAItB,KAAKM,QA1BSQ,KAAAA,cAAatB,IAK/B+B,SAAA,WACH,IAnCwCb,EAAAV,KAAAU,SAiEjCS,EAAQ,EA5BhBD,IAAAA,IAAAA,KAAeR,EACXS,GAAIT,EAASO,GAEb,OAAAE,GAGAK,SAAA,WACH,MAAA,uBA5CwCxB,KAAAO,IAAA,MA4CxC,OAIAkB,EAhDwClC,EAAAmC,WAAA9B,QA8EzC+B,MAAOjC,EA3BHkC,WAAA,WAQI5B,KAAA6B,gBAAQC,KAEf9B,KA7DwC+B,QAAA,GAgErClC,IAAA,WACA,IAAAmC,EAAAhC,KAAAiC,OAAAC,OAAA,SAAAP,GACA,OAAKA,EAALL,aAECa,EAAAH,EACDI,IAAA,SAAAC,GArEqC,OAAAA,EAAA9B,IAAA,QAwEzCiB,KAAU,KACNc,EAAAN,EACHI,IAAA,SAAAC,GA1EL,OAAAA,EAAA9B,IAAA,WA6EIkB,KAAAA,KACAE,OAAOjC,OAAAA,KAAPiC,iBADwD3B,KAAAuC,UACxDZ,qBADwDQ,EACxDR,UADwDW,GAIpDE,QAAA,WAAIzB,IAAAA,EAAAA,KAEI0B,GADJzC,KAAA0C,qBACID,KAAAA,OAAAA,CAEP,IAAAE,EAAA,WAgCGC,EAAKf,gBAAkBgB,WAAW,WA9BtCD,EAAAJ,WA9FW,MAoFyCR,EAAAhC,KAAAiC,OAAAC,OAAA,SAAAP,GA8ChD,OAAQA,EAAML,aA5Bd,GAAAU,EAAcV,QAAdU,EAAA,CAEJ,IAAIG,EAAMH,EACDI,IAAA,SAAAC,GACD,OAAOA,WAEL,OAJVA,EAAAS,WAUA,OAAUhD,IAAAA,EAAAA,QAAViD,UAAAC,GAA2CT,KAA3CI,GA9BoDX,EAAAiB,OAAA,EAiCxDT,KAASM,OAAAI,QAAA,IAAWC,KAAAR,GA6BZA,MAKRD,mBAAoB,WA5BhB1C,KAAI2C,kBACAS,aAAKvB,KAAAA,iBACD7B,KAAA6B,gBAAA,OAIRL,SAAA,WACI,MAAA,6CAIA9B,iBAAAA,EAAA+B,2BAAAA,EAAAV,oBAlIa","file":"../../../scripts/mvc/history/job-states-model.js","sourcesContent":["import * as Backbone from \"libs/backbone\";\nimport AJAX_QUEUE from \"utils/ajax-queue\";\n\n/** ms between fetches when checking running jobs/datasets for updates */\nvar UPDATE_DELAY = 2000;\nvar NON_TERMINAL_STATES = [\"new\", \"queued\", \"running\"];\nvar ERROR_STATES = [\"error\", \"deleted\"];\n/** Fetch state on add or just wait for polling to start. */\nvar FETCH_STATE_ON_ADD = false;\nvar BATCH_FETCH_STATE = true;\n\nvar JobStatesSummary = Backbone.Model.extend({\n    url: function() {\n        return `${Galaxy.root}api/histories/${this.attributes.history_id}/contents/dataset_collections/${\n            this.attributes.collection_id\n        }/jobs_summary`;\n    },\n\n    hasDetails: function() {\n        return this.has(\"populated_state\");\n    },\n\n    new: function() {\n        return !this.hasDetails() || this.get(\"populated_state\") == \"new\";\n    },\n\n    errored: function() {\n        return this.get(\"populated_state\") === \"error\" || this.anyWithStates(ERROR_STATES);\n    },\n\n    states: function() {\n        return this.get(\"states\") || {};\n    },\n\n    anyWithState: function(queryState) {\n        return (this.states()[queryState] || 0) > 0;\n    },\n\n    anyWithStates: function(queryStates) {\n        var states = this.states();\n        for (var index in queryStates) {\n            if ((states[queryStates[index]] || 0) > 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    numWithStates: function(queryStates) {\n        var states = this.states();\n        var count = 0;\n        for (var index in queryStates) {\n            count += states[queryStates[index]] || 0;\n        }\n        return count;\n    },\n\n    numInError: function() {\n        return this.numWithStates(ERROR_STATES);\n    },\n\n    running: function() {\n        return this.anyWithState(\"running\");\n    },\n\n    terminal: function() {\n        if (this.new()) {\n            return false;\n        } else {\n            var anyNonTerminal = this.anyWithStates(NON_TERMINAL_STATES);\n            return !anyNonTerminal;\n        }\n    },\n\n    jobCount: function() {\n        var states = this.states();\n        var count = 0;\n        for (var index in states) {\n            count += states[index];\n        }\n        return count;\n    },\n\n    toString: function() {\n        return `JobStatesSummary(id=${this.get(\"id\")})`;\n    }\n});\n\nvar JobStatesSummaryCollection = Backbone.Collection.extend({\n    model: JobStatesSummary,\n\n    initialize: function() {\n        if (FETCH_STATE_ON_ADD) {\n            this.on({\n                add: model => model.fetch()\n            });\n        }\n\n        /** cached timeout id for the dataset updater */\n        this.updateTimeoutId = null;\n        // this.checkForUpdates();\n        this.active = true;\n    },\n\n    url: function() {\n        var nonTerminalModels = this.models.filter(model => {\n            return !model.terminal();\n        });\n        var ids = nonTerminalModels\n            .map(summary => {\n                return summary.get(\"id\");\n            })\n            .join(\",\");\n        var types = nonTerminalModels\n            .map(summary => {\n                return summary.get(\"model\");\n            })\n            .join(\",\");\n        return `${Galaxy.root}api/histories/${this.historyId}/jobs_summary?ids=${ids}&types=${types}`;\n    },\n\n    monitor: function() {\n        this.clearUpdateTimeout();\n        if (!this.active) {\n            return;\n        }\n\n        var _delayThenMonitorAgain = () => {\n            this.updateTimeoutId = setTimeout(() => {\n                this.monitor();\n            }, UPDATE_DELAY);\n        };\n\n        var nonTerminalModels = this.models.filter(model => {\n            return !model.terminal();\n        });\n\n        if (nonTerminalModels.length > 0 && !BATCH_FETCH_STATE) {\n            // Allow models to fetch their own details.\n            var updateFunctions = nonTerminalModels.map(summary => {\n                return () => {\n                    return summary.fetch();\n                };\n            });\n\n            return new AJAX_QUEUE.AjaxQueue(updateFunctions).done(_delayThenMonitorAgain);\n        } else if (nonTerminalModels.length > 0) {\n            // Batch fetch updated state...\n            this.fetch({ remove: false }).done(_delayThenMonitorAgain);\n        } else {\n            _delayThenMonitorAgain();\n        }\n    },\n\n    /** clear the timeout and the cached timeout id */\n    clearUpdateTimeout: function() {\n        if (this.updateTimeoutId) {\n            clearTimeout(this.updateTimeoutId);\n            this.updateTimeoutId = null;\n        }\n    },\n\n    toString: function() {\n        return `JobStatesSummaryCollection()`;\n    }\n});\n\nexport default { JobStatesSummary, JobStatesSummaryCollection, FETCH_STATE_ON_ADD };\n"]}
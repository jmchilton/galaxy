type: map
mapping:
  uwsgi:
    type: any
    required: false
    desc: |
      uwsgi definition, see http://uwsgi-docs.readthedocs.io/en/latest/Options.html
  galaxy:
    type: map
    required: true
    desc: |
      Galaxy options
    mapping:
      filter-with:
        type: str
        required: false
        desc: |
          If not running behind a proxy server, you may want to enable gzip compression
          to decrease the size of data transferred over the network.  If using a proxy
          server, please enable gzip compression there instead.
      
      filter-with:
        type: str
        required: false
        desc: |
          If running behind a proxy server and Galaxy is served from a subdirectory,
          enable the proxy-prefix filter and set the prefix in the
          [filter:proxy-prefix] section above.
      
      cookie_path:
        type: str
        required: false
        desc: |
          If proxy-prefix is enabled and you're running more than one Galaxy instance
          behind one hostname, you will want to set this to the same path as the prefix
          in the filter above.  This value becomes the "path" attribute set in the
          cookie so the cookies from each instance will not clobber each other.
      
      database_connection:
        type: str
        required: false
        desc: |
          By default, Galaxy uses a SQLite database at 'database/universe.sqlite'.  You
          may use a SQLAlchemy connection string to specify an external database
          instead.  This string takes many options which are explained in detail in the
          config file documentation.
      
      database_engine_option_pool_size:
        type: int
        required: false
        desc: |
          If the server logs errors about not having enough database pool connections,
          you will want to increase these values, or consider running more Galaxy
          processes.
      
      database_engine_option_max_overflow:
        type: int
        required: false
        desc: |
          If the server logs errors about not having enough database pool connections,
          you will want to increase these values, or consider running more Galaxy
          processes.
      
      database_engine_option_pool_recycle:
        type: str
        required: false
        desc: |
          If using MySQL and the server logs the error "MySQL server has gone away",
          you will want to set this to some positive value (7200 should work).
      
      database_engine_option_server_side_cursors:
        type: str
        required: false
        desc: |
          If large database query results are causing memory or response time issues in
          the Galaxy process, leave the result on the server instead.  This option is
          only available for PostgreSQL and is highly recommended.
      
      database_query_profiling_proxy:
        type: str
        required: false
        desc: |
          Log all database transactions, can be useful for debugging and performance
          profiling.  Logging is done via Python's 'logging' module under the qualname
          'galaxy.model.orm.logging_connection_proxy'
      
      install_database_connection:
        type: str
        required: false
        desc: |
          By default, Galaxy will use the same database to track user data and
          tool shed install data.  There are many situations in which it is
          valuable to separate these - for instance bootstrapping fresh Galaxy
          instances with pretested installs.  The following option can be used to
          separate the tool shed install database (all other options listed above
          but prefixed with install_ are also available).
      
      database_auto_migrate:
        type: str
        required: false
        desc: |
          Setting the following option to true will cause Galaxy to automatically
          migrate the database forward after updates. This is not recommended for production
          use.
      
      file_path:
        type: str
        required: false
        desc: |
          Dataset files are stored in this directory.
      
      new_file_path:
        type: str
        required: false
        desc: |
          Temporary files are stored in this directory.
      
      tool_config_file:
        type: str
        required: false
        desc: |
          Tool config files, defines what tools are available in Galaxy.
          Tools can be locally developed or installed from Galaxy tool sheds.
          (config/tool_conf.xml.sample will be used if left unset and
          config/tool_conf.xml does not exist).
      
      check_migrate_tools:
        type: str
        required: false
        desc: |
          Enable / disable checking if any tools defined in the above non-shed
          tool_config_files (i.e., tool_conf.xml) have been migrated from the Galaxy
          code distribution to the Tool Shed.  This setting should generally be set to
          False only for development Galaxy environments that are often rebuilt from
          scratch where migrated tools do not need to be available in the Galaxy tool
          panel.  If the following setting remains commented, the default setting will
          be True.
      
      migrated_tools_config:
        type: str
        required: false
        desc: |
          Tool config maintained by tool migration scripts.  If you use the migration
          scripts to install tools that have been migrated to the tool shed upon a new
          release, they will be added to this tool config file.
      
      integrated_tool_panel_config:
        type: str
        required: false
        desc: |
          File that contains the XML section and tool tags from all tool panel config
          files integrated into a single file that defines the tool panel layout.  This
          file can be changed by the Galaxy administrator to alter the layout of the
          tool panel.  If not present, Galaxy will create it.
      
      tool_path:
        type: str
        required: false
        desc: |
          Default path to the directory containing the tools defined in tool_conf.xml.
          Other tool config files must include the tool_path as an attribute in the
          <toolbox> tag.
      
      tool_dependency_dir:
        type: str
        required: false
        desc: |
          Path to the directory in which tool dependencies are placed.  This is used by
          the Tool Shed to install dependencies and can also be used by administrators
          to manually install or link to dependencies.  For details, see:
            https://wiki.galaxyproject.org/Admin/Config/ToolDependencies
          Set to the string none to explicitly disable tool dependency handling.
          If this option is set to none or an invalid path, installing tools with dependencies
          from the Tool Shed will fail.
      
      dependency_resolvers_config_file:
        type: str
        required: false
        desc: |
          The dependency resolvers config file specifies an ordering and options for how
          Galaxy resolves tool dependencies (requirement tags in Tool XML). The default
          ordering is to the use the Tool Shed for tools installed that way, use local
          Galaxy packages, and then use Conda if available.
          See https://github.com/galaxyproject/galaxy/blob/dev/doc/source/admin/dependency_resolvers.rst
          for more information on these options.
      
      conda_prefix:
        type: str
        required: false
        desc: |
          The following Conda dependency resolution options will change the defaults for
          all Conda resolvers, but multiple resolvers can be configured independently
          in dependency_resolvers_config_file and these options overridden.
          Location on the filesystem where Conda packages are installed
          Override the Conda executable to use, it will default to the one on the
          PATH (if available) and then to <conda_prefix>/bin/conda
          Pass debug flag to conda commands.
          conda channels to enable by default (http://conda.pydata.org/docs/custom-channels.html)
          Set to True to instruct Galaxy to look for and install missing tool
          dependencies before each job runs.
          Set to True to perform additional checking of installed Conda environment
          Set to True to instruct Galaxy to install Conda from the web automatically
          if it cannot find a local copy and conda_exec is not configured.
      
      conda_exec:
        type: str
        required: false
        desc: |
          The following Conda dependency resolution options will change the defaults for
          all Conda resolvers, but multiple resolvers can be configured independently
          in dependency_resolvers_config_file and these options overridden.
          Location on the filesystem where Conda packages are installed
          Override the Conda executable to use, it will default to the one on the
          PATH (if available) and then to <conda_prefix>/bin/conda
          Pass debug flag to conda commands.
          conda channels to enable by default (http://conda.pydata.org/docs/custom-channels.html)
          Set to True to instruct Galaxy to look for and install missing tool
          dependencies before each job runs.
          Set to True to perform additional checking of installed Conda environment
          Set to True to instruct Galaxy to install Conda from the web automatically
          if it cannot find a local copy and conda_exec is not configured.
      
      conda_debug:
        type: str
        required: false
        desc: |
          The following Conda dependency resolution options will change the defaults for
          all Conda resolvers, but multiple resolvers can be configured independently
          in dependency_resolvers_config_file and these options overridden.
          Location on the filesystem where Conda packages are installed
          Override the Conda executable to use, it will default to the one on the
          PATH (if available) and then to <conda_prefix>/bin/conda
          Pass debug flag to conda commands.
          conda channels to enable by default (http://conda.pydata.org/docs/custom-channels.html)
          Set to True to instruct Galaxy to look for and install missing tool
          dependencies before each job runs.
          Set to True to perform additional checking of installed Conda environment
          Set to True to instruct Galaxy to install Conda from the web automatically
          if it cannot find a local copy and conda_exec is not configured.
      
      conda_ensure_channels:
        type: str
        required: false
        desc: |
          The following Conda dependency resolution options will change the defaults for
          all Conda resolvers, but multiple resolvers can be configured independently
          in dependency_resolvers_config_file and these options overridden.
          Location on the filesystem where Conda packages are installed
          Override the Conda executable to use, it will default to the one on the
          PATH (if available) and then to <conda_prefix>/bin/conda
          Pass debug flag to conda commands.
          conda channels to enable by default (http://conda.pydata.org/docs/custom-channels.html)
          Set to True to instruct Galaxy to look for and install missing tool
          dependencies before each job runs.
          Set to True to perform additional checking of installed Conda environment
          Set to True to instruct Galaxy to install Conda from the web automatically
          if it cannot find a local copy and conda_exec is not configured.
      
      conda_auto_install:
        type: str
        required: false
        desc: |
          The following Conda dependency resolution options will change the defaults for
          all Conda resolvers, but multiple resolvers can be configured independently
          in dependency_resolvers_config_file and these options overridden.
          Location on the filesystem where Conda packages are installed
          Override the Conda executable to use, it will default to the one on the
          PATH (if available) and then to <conda_prefix>/bin/conda
          Pass debug flag to conda commands.
          conda channels to enable by default (http://conda.pydata.org/docs/custom-channels.html)
          Set to True to instruct Galaxy to look for and install missing tool
          dependencies before each job runs.
          Set to True to perform additional checking of installed Conda environment
          Set to True to instruct Galaxy to install Conda from the web automatically
          if it cannot find a local copy and conda_exec is not configured.
      
      conda_verbose_install_check:
        type: str
        required: false
        desc: |
          The following Conda dependency resolution options will change the defaults for
          all Conda resolvers, but multiple resolvers can be configured independently
          in dependency_resolvers_config_file and these options overridden.
          Location on the filesystem where Conda packages are installed
          Override the Conda executable to use, it will default to the one on the
          PATH (if available) and then to <conda_prefix>/bin/conda
          Pass debug flag to conda commands.
          conda channels to enable by default (http://conda.pydata.org/docs/custom-channels.html)
          Set to True to instruct Galaxy to look for and install missing tool
          dependencies before each job runs.
          Set to True to perform additional checking of installed Conda environment
          Set to True to instruct Galaxy to install Conda from the web automatically
          if it cannot find a local copy and conda_exec is not configured.
      
      conda_auto_init:
        type: str
        required: false
        desc: |
          The following Conda dependency resolution options will change the defaults for
          all Conda resolvers, but multiple resolvers can be configured independently
          in dependency_resolvers_config_file and these options overridden.
          Location on the filesystem where Conda packages are installed
          Override the Conda executable to use, it will default to the one on the
          PATH (if available) and then to <conda_prefix>/bin/conda
          Pass debug flag to conda commands.
          conda channels to enable by default (http://conda.pydata.org/docs/custom-channels.html)
          Set to True to instruct Galaxy to look for and install missing tool
          dependencies before each job runs.
          Set to True to perform additional checking of installed Conda environment
          Set to True to instruct Galaxy to install Conda from the web automatically
          if it cannot find a local copy and conda_exec is not configured.
      
      tool_sheds_config_file:
        type: str
        required: false
        desc: |
          File containing the Galaxy Tool Sheds that should be made available to
          install from in the admin interface (.sample used if default does not exist).
      
      watch_tools:
        type: str
        required: false
        desc: |
          Set to True to enable monitoring of tools and tool directories
          listed in any tool config file specified in tool_config_file option.
          If changes are found, tools are automatically reloaded.  Watchdog (
          https://pypi.python.org/pypi/watchdog ) must be installed and
          available to Galaxy to use this option. Other options include 'auto'
          which will attempt to watch tools if the watchdog library is available
          but won't fail to load Galaxy if it is not and 'polling' which will use
          a less efficient monitoring scheme that may work in wider range of scenarios
          than the watchdog default.
      
      enable_tool_shed_check:
        type: str
        required: false
        desc: |
          Enable automatic polling of relative tool sheds to see if any updates
          are available for installed repositories.  Ideally only one Galaxy
          server process should be able to check for repository updates.  The
          setting for hours_between_check should be an integer between 1 and 24.
      
      hours_between_check:
        type: int
        required: false
        desc: |
          Enable automatic polling of relative tool sheds to see if any updates
          are available for installed repositories.  Ideally only one Galaxy
          server process should be able to check for repository updates.  The
          setting for hours_between_check should be an integer between 1 and 24.
      
      manage_dependency_relationships:
        type: str
        required: false
        desc: |
          Enable use of an in-memory registry with bi-directional relationships between
          repositories (i.e., in addition to lists of dependencies for a repository,
          keep an in-memory registry of dependent items for each repository.
      
      tool_data_table_config_path:
        type: str
        required: false
        desc: |
          XML config file that contains data table entries for the
          ToolDataTableManager.  This file is manually # maintained by the Galaxy
          administrator (.sample used if default does not exist).
      
      shed_tool_data_table_config:
        type: str
        required: false
        desc: |
          XML config file that contains additional data table entries for the
          ToolDataTableManager.  This file is automatically generated based on the
          current installed tool shed repositories that contain valid
          tool_data_table_conf.xml.sample files.  At the time of installation, these
          entries are automatically added to the following file, which is parsed and
          applied to the ToolDataTableManager at server start up.
      
      tool_data_path:
        type: str
        required: false
        desc: |
          Directory where data used by tools is located, see the samples in that
          directory and the wiki for help:
            https://wiki.galaxyproject.org/Admin/DataIntegration
      
      shed_tool_data_path:
        type: str
        required: false
        desc: |
          Directory where Tool Data Table related files will be placed
          when installed from a ToolShed. Defaults to tool_data_path.
      
      builds_file_path:
        type: str
        required: false
        desc: |
          File containing old-style genome builds
      
      len_file_path:
        type: str
        required: false
        desc: |
          Directory where chrom len files are kept, currently mainly used by trackster
      
      datatypes_config_file:
        type: str
        required: false
        desc: |
          Datatypes config file(s), defines what data (file) types are available in
          Galaxy (.sample is used if default does not exist).  If a datatype appears in
          multiple files, the last definition is used (though the first sniffer is used
          so limit sniffer definitions to one file).
      
      datatypes_disable_auto:
        type: str
        required: false
        desc: |
          Disable the 'Auto-detect' option for file uploads
      
      visualization_plugins_directory:
        type: str
        required: false
        desc: |
          Visualizations config directory: where to look for individual visualization
          plugins.  The path is relative to the Galaxy root dir.  To use an absolute
          path begin the path with '/'.  This is a comma separated list.
          Defaults to "config/plugins/visualizations".
      
      interactive_environment_plugins_directory:
        type: str
        required: false
        desc: |
          Interactive environment plugins root directory: where to look for interactive
          environment plugins.  By default none will be loaded.  Set to
          config/plugins/interactive_environments to load Galaxy's stock plugins
          (currently just IPython).  These will require Docker to be configured and
          have security considerations, so proceed with caution. The path is relative to the
          Galaxy root dir.  To use an absolute path begin the path with '/'.  This is a comma
          separated list.
      
      tour_config_dir:
        type: str
        required: false
        desc: |
          Interactive tour directory: where to store interactive tour definition files.
          Galaxy ships with several basic interface tours enabled, though a different
          directory with custom tours can be specified here. The path is relative to the
          Galaxy root dir.  To use an absolute path begin the path with '/'.  This is a comma
          separated list.
      
      job_working_directory:
        type: str
        required: false
        desc: |
          Each job is given a unique empty directory as its current working directory.
          This option defines in what parent directory those directories will be
          created.
      
      cluster_files_directory:
        type: str
        required: false
        desc: |
          If using a cluster, Galaxy will write job scripts and stdout/stderr to this
          directory.
      
      template_cache_path:
        type: str
        required: false
        desc: |
          Mako templates are compiled as needed and cached for reuse, this directory is
          used for the cache
      
      check_job_script_integrity:
        type: str
        required: false
        desc: |
          Set to false to disable various checks Galaxy will do to ensure it
          can run job scripts before attempting to execute or submit them.
          Number of checks to execute if check_job_script_integrity is enabled.
          Time to sleep between checks if check_job_script_integrity is enabled (in seconds).
      
      check_job_script_integrity_count:
        type: int
        required: false
        desc: |
          Set to false to disable various checks Galaxy will do to ensure it
          can run job scripts before attempting to execute or submit them.
          Number of checks to execute if check_job_script_integrity is enabled.
          Time to sleep between checks if check_job_script_integrity is enabled (in seconds).
      
      check_job_script_integrity_sleep:
        type: str
        required: false
        desc: |
          Set to false to disable various checks Galaxy will do to ensure it
          can run job scripts before attempting to execute or submit them.
          Number of checks to execute if check_job_script_integrity is enabled.
          Time to sleep between checks if check_job_script_integrity is enabled (in seconds).
      
      default_job_shell:
        type: str
        required: false
        desc: |
          Set the default shell used by non-containerized jobs Galaxy-wide. This
          defaults to bash for all jobs and can be overidden at the destination
          level for heterogenous clusters. conda job resolution requires bash or zsh
          so if this is switched to /bin/sh for instance - conda resolution
          should be disabled. Containerized jobs always use /bin/sh - so more maximum
          portability tool authors should assume generated commands run in sh.
      
      citation_cache_type:
        type: str
        required: false
        desc: |
          Citation related caching.  Tool citations information maybe fetched from
          external sources such as http://dx.doi.org/ by Galaxy - the following
          parameters can be used to control the caching used to store this information.
      
      citation_cache_data_dir:
        type: str
        required: false
        desc: |
          Citation related caching.  Tool citations information maybe fetched from
          external sources such as http://dx.doi.org/ by Galaxy - the following
          parameters can be used to control the caching used to store this information.
      
      citation_cache_lock_dir:
        type: str
        required: false
        desc: |
          Citation related caching.  Tool citations information maybe fetched from
          external sources such as http://dx.doi.org/ by Galaxy - the following
          parameters can be used to control the caching used to store this information.
      
      external_service_type_config_file:
        type: str
        required: false
        desc: |
          External service types config file, defining what types of external_services
          configurations are available in Galaxy (.sample is used if default does not
          exist).
      
      external_service_type_path:
        type: str
        required: false
        desc: |
          Path to the directory containing the external_service_types defined in the
          config.
      
      collect_outputs_from:
        type: str
        required: false
        desc: |
          Tools with a number of outputs not known until runtime can write these
          outputs to a directory for collection by Galaxy when the job is done.
          Previously, this directory was new_file_path, but using one global directory
          can cause performance problems, so using job_working_directory ('.' or cwd
          when a job is run) is encouraged.  By default, both are checked to avoid
          breaking existing tools.
      
      smtp_server:
        type: str
        required: false
        desc: |
          Galaxy sends mail for various things: subscribing users to the mailing list
          if they request it, password resets, notifications from the Galaxy Sample
          Tracking system, reporting dataset errors, and sending activation emails.
          To do this, it needs to send mail through an SMTP server, which you may
          define here (host:port).
          Galaxy will automatically try STARTTLS but will continue upon failure.
      
      smtp_username:
        type: str
        required: false
        desc: |
          If your SMTP server requires a username and password, you can provide them
          here (password in cleartext here, but if your server supports STARTTLS it
          will be sent over the network encrypted).
      
      smtp_password:
        type: str
        required: false
        desc: |
          If your SMTP server requires a username and password, you can provide them
          here (password in cleartext here, but if your server supports STARTTLS it
          will be sent over the network encrypted).
      
      mailing_join_addr:
        type: str
        required: false
        desc: |
          On the user registration form, users may choose to join a mailing list. This
          is the address used to subscribe to the list. Uncomment and leave empty if you
          want to remove this option from the user registration form.
      
      error_email_to:
        type: str
        required: false
        desc: |
          Datasets in an error state include a link to report the error.  Those reports
          will be sent to this address.  Error reports are disabled if no address is
          set.  Also this email is shown as a contact to user in case of Galaxy
          misconfiguration and other events user may encounter.
      
      email_from:
        type: str
        required: false
        desc: |
          Email address to use in the 'From' field when sending emails for
          account activations, workflow step notifications and password resets.
          We recommend using string in the following format:
          Galaxy Project <galaxy-no-reply@example.com>
          If not configured, '<galaxy-no-reply@HOSTNAME>' will be used.
      
      instance_resource_url:
        type: str
        required: false
        desc: |
          URL of the support resource for the galaxy instance.  Used in activation
          emails.
      
      blacklist_file:
        type: str
        required: false
        desc: |
          E-mail domains blacklist is used for filtering out users that are using
          disposable email address during the registration.  If their address domain
          matches any domain in the blacklist, they are refused the registration.
      
      registration_warning_message:
        type: str
        required: false
        desc: |
          Registration warning message is used to discourage people from registering
          multiple accounts.  Applies mostly for the main Galaxy instance.
          If no message specified the warning box will not be shown.
      
      user_activation_on:
        type: str
        required: false
        desc: |
          User account activation feature global flag.  If set to "False", the rest of
          the Account activation configuration is ignored and user activation is
          disabled (i.e. accounts are active since registration).
          The activation is also not working in case the SMTP server is not defined.
      
      activation_grace_period:
        type: int
        required: false
        desc: |
          Activation grace period (in hours).  Activation is not forced (login is not
          disabled) until grace period has passed.  Users under grace period can't run
          jobs. Enter 0 to disable grace period.
          Users with OpenID logins have grace period forever.
      
      inactivity_box_content:
        type: str
        required: false
        desc: |
          Shown in warning box to users that were not activated yet.
          In use only if activation_grace_period is set.
      
      password_expiration_period:
        type: int
        required: false
        desc: |
          Password expiration period (in days). Users are required to change their
          password every x days. Users will be redirected to the change password
          screen when they log in after their password expires. Enter 0 to disable
          password expiration.
      
      session_duration:
        type: int
        required: false
        desc: |
          Galaxy Session Timeout
          This provides a timeout (in minutes) after which a user will have to log back in.
          A duration of 0 disables this feature.
      
      ga_code:
        type: str
        required: false
        desc: |
          You can enter tracking code here to track visitor's behavior
          through your Google Analytics account.  Example: UA-XXXXXXXX-Y
      
      display_servers:
        type: str
        required: false
        desc: |
          If use_remote_user = True, display application servers will be denied access
          to Galaxy and so displaying datasets in these sites will fail.
          display_servers contains a list of hostnames which should be allowed to
          bypass security to display datasets.  Please be aware that there are security
          implications if this is allowed.  More details (including required changes to
          the proxy server config) are available in the Apache proxy documentation on
          the wiki.
          
          The list of servers in this sample config are for the UCSC Main, Test and
          Archaea browsers, but the default if left commented is to not allow any
          display sites to bypass security (you must uncomment the line below to allow
          them).
      
      enable_old_display_applications:
        type: str
        required: false
        desc: |
          To disable the old-style display applications that are hardcoded into
          datatype classes, set enable_old_display_applications = False.
          This may be desirable due to using the new-style, XML-defined, display
          applications that have been defined for many of the datatypes that have the
          old-style.
          There is also a potential security concern with the old-style applications,
          where a malicious party could provide a link that appears to reference the
          Galaxy server, but contains a redirect to a third-party server, tricking a
          Galaxy user to access said site.
      
      message_box_visible:
        type: str
        required: false
        desc: |
          Show a message box under the masthead.
      
      message_box_content:
        type: str
        required: false
        desc: |
          Show a message box under the masthead.
      
      message_box_class:
        type: str
        required: false
        desc: |
          Show a message box under the masthead.
      
      brand:
        type: str
        required: false
        desc: |
          Append "/{brand}" to the "Galaxy" text in the masthead.
      
      galaxy_infrastructure_url:
        type: str
        required: false
        desc: |
          URL (with schema http/https) of the Galaxy instance as accessible within your
          local network - if specified used as a default by pulsar file staging and
          IPython Docker container for communicating back with Galaxy via the API.
      
      galaxy_infrastructure_web_port:
        type: int
        required: false
        desc: |
          If the above URL cannot be determined ahead of time in dynamic environments
          but the port which should be used to access Galaxy can be - this should be
          set to prevent Galaxy from having to guess.  For example if Galaxy is sitting
          behind a proxy with REMOTE_USER enabled - infrastructure shouldn't talk to
          Python processes directly and this should be set to 80 or 443, etc... If
          unset this file will be read for a server block defining a port corresponding
          to the webapp.
      
      welcome_url:
        type: str
        required: false
        desc: |
          The URL of the page to display in Galaxy's middle pane when loaded.  This can
          be an absolute or relative URL.
      
      logo_url:
        type: str
        required: false
        desc: |
          The URL linked by the "Galaxy/brand" text.
      
      wiki_url:
        type: str
        required: false
        desc: |
          The URL linked by the "Wiki" link in the "Help" menu.
      
      support_url:
        type: str
        required: false
        desc: |
          The URL linked by the "Support" link in the "Help" menu.
      
      citation_url:
        type: str
        required: false
        desc: |
          The URL linked by the "How to Cite Galaxy" link in the "Help" menu.
      
      search_url:
        type: str
        required: false
        desc: |
          The URL linked by the "Search" link in the "Help" menu.
      
      mailing_lists_url:
        type: str
        required: false
        desc: |
          The URL linked by the "Mailing Lists" link in the "Help" menu.
      
      screencasts_url:
        type: str
        required: false
        desc: |
          The URL linked by the "Videos" link in the "Help" menu.
      
      terms_url:
        type: str
        required: false
        desc: |
          The URL linked by the "Terms and Conditions" link in the "Help" menu, as well
          as on the user registration and login forms and in the activation emails.
      
      qa_url:
        type: str
        required: false
        desc: |
          The URL linked by the "Galaxy Q&A" link in the "Help" menu
          The Galaxy Q&A site is under development; when the site is done, this URL
          will be set and uncommented.
      
      static_enabled:
        type: str
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.
      
      static_cache_time:
        type: int
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.
      
      static_dir:
        type: str
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.
      
      static_images_dir:
        type: str
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.
      
      static_favicon_dir:
        type: str
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.
      
      static_scripts_dir:
        type: str
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.
      
      static_style_dir:
        type: str
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.
      
      static_robots_txt:
        type: str
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.
      
      display_chunk_size:
        type: int
        required: false
        desc: |
      
      apache_xsendfile:
        type: str
        required: false
        desc: |
          Apache can handle file downloads (Galaxy-to-user) via mod_xsendfile.  Set
          this to True to inform Galaxy that mod_xsendfile is enabled upstream.
      
      nginx_x_accel_redirect_base:
        type: str
        required: false
        desc: |
          The same download handling can be done by nginx using X-Accel-Redirect.  This
          should be set to the path defined in the nginx config as an internal redirect
          with access to Galaxy's data files (see documentation linked above).
      
      nginx_x_archive_files_base:
        type: str
        required: false
        desc: |
          nginx can make use of mod_zip to create zip files containing multiple library
          files.  If using X-Accel-Redirect, this can be the same value as that option.
      
      upstream_gzip:
        type: str
        required: false
        desc: |
          If using compression in the upstream proxy server, use this option to disable
          gzipping of library .tar.gz and .zip archives, since the proxy server will do
          it faster on the fly.
      
      x_frame_options:
        type: str
        required: false
        desc: |
          The following default adds a header to web request responses that
          will cause modern web browsers to not allow Galaxy to be embedded in
          the frames of web applications hosted at other hosts - this can help
          prevent a class of attack called clickjacking
          (https://www.owasp.org/index.php/Clickjacking).  If you configure a
          proxy in front of Galaxy - please ensure this header remains intact
          to protect your users.  Uncomment and leave empty to not set the
          `X-Frame-Options` header.
      
      nginx_upload_store:
        type: str
        required: false
        desc: |
          nginx can also handle file uploads (user-to-Galaxy) via nginx_upload_module.
          Configuration for this is complex and explained in detail in the
          documentation linked above.  The upload store is a temporary directory in
          which files uploaded by the upload module will be placed.
      
      nginx_upload_path:
        type: str
        required: false
        desc: |
          This value overrides the action set on the file upload form, e.g. the web
          path where the nginx_upload_module has been configured to intercept upload
          requests.
      
      nginx_upload_job_files_store:
        type: str
        required: false
        desc: |
          Galaxy can also use nginx_upload_module to receive files staged out upon job
          completion by remote job runners (i.e. Pulsar) that initiate staging
          operations on the remote end.  See the Galaxy nginx documentation for the
          corresponding nginx configuration.
      
      nginx_upload_job_files_path:
        type: str
        required: false
        desc: |
          Galaxy can also use nginx_upload_module to receive files staged out upon job
          completion by remote job runners (i.e. Pulsar) that initiate staging
          operations on the remote end.  See the Galaxy nginx documentation for the
          corresponding nginx configuration.
      
      dynamic_proxy_manage:
        type: str
        required: false
        desc: |
          Have Galaxy manage dynamic proxy component for routing requests to other
          services based on Galaxy's session cookie.  It will attempt to do this by
          default though you do need to install node+npm and do an npm install from
          `lib/galaxy/web/proxy/js`.  It is generally more robust to configure this
          externally managing it however Galaxy is managed.  If True Galaxy will only
          launch the proxy if it is actually going to be used (e.g. for IPython).
      
      dynamic_proxy:
        type: str
        required: false
        desc: |
          As of 16.04 Galaxy supports multiple proxy types. The original NodeJS
          implementation, alongside a new Golang single-binary-no-dependencies
          version. Valid values are (node, golang)
          
          The NodeJS dynamic proxy can use an SQLite database or a JSON file for IPC,
          set that here.
      
      dynamic_proxy_session_map:
        type: str
        required: false
        desc: |
          As of 16.04 Galaxy supports multiple proxy types. The original NodeJS
          implementation, alongside a new Golang single-binary-no-dependencies
          version. Valid values are (node, golang)
          
          The NodeJS dynamic proxy can use an SQLite database or a JSON file for IPC,
          set that here.
      
      dynamic_proxy_bind_port:
        type: int
        required: false
        desc: |
          Set the port and IP for the the dynamic proxy to bind to, this must match
          the external configuration if dynamic_proxy_manage is False.
      
      dynamic_proxy_bind_ip:
        type: str
        required: false
        desc: |
          Set the port and IP for the the dynamic proxy to bind to, this must match
          the external configuration if dynamic_proxy_manage is False.
      
      dynamic_proxy_debug:
        type: str
        required: false
        desc: |
          Enable verbose debugging of Galaxy-managed dynamic proxy.
      
      dynamic_proxy_external_proxy:
        type: str
        required: false
        desc: |
          The dynamic proxy is proxied by an external proxy (e.g. apache frontend to
          nodejs to wrap connections in SSL).
      
      dynamic_proxy_prefix:
        type: str
        required: false
        desc: |
          Additionally, when the dynamic proxy is proxied by an upstream server, you'll
          want to specify a prefixed URL so both Galaxy and the proxy reside under the
          same path that your cookies are under. This will result in a url like
          https://FQDN/galaxy-prefix/gie_proxy for proxying
      
      dynamic_proxy_golang_noaccess:
        type: int
        required: false
        desc: |
          This attribute governs the minimum length of time between consecutive HTTP/WS
          requests through the proxy, before the proxy considers a container as being
          inactive and kills it.
      
      dynamic_proxy_golang_clean_interval:
        type: int
        required: false
        desc: |
          In order to kill containers, the golang proxy has to check at some interval
          for possibly dead containers. This is exposed as a configurable parameter,
          but the default value is probably fine.
      
      dynamic_proxy_golang_docker_address:
        type: str
        required: false
        desc: |
          The golang proxy needs to know how to talk to your docker daemon. Currently
          TLS is not supported, that will come in an update.
      
      dynamic_proxy_golang_api_key:
        type: str
        required: false
        desc: |
          The golang proxy uses a RESTful HTTP API for communication with Galaxy
          instead of a JSON or SQLite file for IPC. If you do not specify this, it will
          be set randomly for you. You should set this if you are managing the proxy
          manually.
      
      auto_configure_logging:
        type: str
        required: false
        desc: |
          If True, Galaxy will attempt to configure a simple root logger if a
          "loggers" section does not appear in this configuration file.
      
      log_level:
        type: str
        required: false
        desc: |
          Verbosity of console log messages.  Acceptable values can be found here:
          https://docs.python.org/2/library/logging.html#logging-levels
      
      database_engine_option_echo:
        type: str
        required: false
        desc: |
          Print database operations to the server log (warning, quite verbose!).
      
      database_engine_option_echo_pool:
        type: str
        required: false
        desc: |
          Print database pool operations to the server log (warning, quite verbose!).
      
      log_events:
        type: str
        required: false
        desc: |
          Turn on logging of application events and some user events to the database.
      
      log_actions:
        type: str
        required: false
        desc: |
          Turn on logging of user actions to the database.  Actions currently logged
          are grid views, tool searches, and use of "recently" used tools menu.  The
          log_events and log_actions functionality will eventually be merged.
      
      fluent_log:
        type: str
        required: false
        desc: |
          Fluentd configuration.  Various events can be logged to the fluentd instance
          configured below by enabling fluent_log.
      
      fluent_host:
        type: str
        required: false
        desc: |
          Fluentd configuration.  Various events can be logged to the fluentd instance
          configured below by enabling fluent_log.
      
      fluent_port:
        type: int
        required: false
        desc: |
          Fluentd configuration.  Various events can be logged to the fluentd instance
          configured below by enabling fluent_log.
      
      sanitize_all_html:
        type: str
        required: false
        desc: |
          Sanitize all HTML tool output.  By default, all tool output served as
          'text/html' will be sanitized thoroughly.  This can be disabled if you have
          special tools that require unaltered output.  WARNING: disabling this does
          make the Galaxy instance susceptible to XSS attacks initiated by your users.
      
      sanitize_whitelist_file:
        type: str
        required: false
        desc: |
          Whitelist sanitization file.
          Datasets created by tools listed in this file are trusted and will not have
          their HTML sanitized on display.  This can be manually edited or manipulated
          through the Admin control panel -- see "Manage Display Whitelist"
      
      serve_xss_vulnerable_mimetypes:
        type: str
        required: false
        desc: |
          By default Galaxy will serve non-HTML tool output that may potentially
          contain browser executable JavaScript content as plain text.  This will for
          instance cause SVG datasets to not render properly and so may be disabled
          by setting the following option to True.
      
      allowed_origin_hostnames:
        type: str
        required: false
        desc: |
          Return a Access-Control-Allow-Origin response header that matches the Origin
          header of the request if that Origin hostname matches one of the strings or
          regular expressions listed here. This is a comma separated list of hostname
          strings or regular expressions beginning and ending with /.
          E.g. mysite.com,google.com,usegalaxy.org,/^[\w\.]*example\.com/
          See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
      
      trust_ipython_notebook_conversion:
        type: str
        required: false
        desc: |
          Set the following to True to use IPython nbconvert to build HTML from IPython
          notebooks in Galaxy histories.  This process may allow users to execute
          arbitrary code or serve arbitrary HTML.  If enabled, IPython must be
          available and on Galaxy's PATH, to do this run
          `pip install jinja2 pygments ipython` in Galaxy's virtualenv.
      
      debug:
        type: str
        required: false
        desc: |
          Debug enables access to various config options useful for development and
          debugging: use_lint, use_profile, use_printdebug and use_interactive.  It
          also causes the files used by PBS/SGE (submission script, output, and error)
          to remain on disk after the job is complete.
      
      use_lint:
        type: str
        required: false
        desc: |
          Check for WSGI compliance.
      
      use_profile:
        type: str
        required: false
        desc: |
          Run the Python profiler on each request.
      
      use_printdebug:
        type: str
        required: false
        desc: |
          Intercept print statements and show them on the returned page.
      
      use_heartbeat:
        type: str
        required: false
        desc: |
          Write thread status periodically to 'heartbeat.log',  (careful, uses disk
          space rapidly!).  Useful to determine why your processes may be consuming a
          lot of CPU.
      
      heartbeat_interval:
        type: int
        required: false
        desc: |
          Control the period (in seconds) between dumps. Use -1 to disable. Regardless
          of this setting, if use_heartbeat is enabled, you can send a Galaxy process
          (unless running with uWSGI) SIGUSR1 (`kill -USR1`) to force a dump.
      
      heartbeat_log:
        type: str
        required: false
        desc: |
          Heartbeat log filename. Can accept the template variables {server_name} and
          {pid}
      
      sentry_dsn:
        type: str
        required: false
        desc: |
          Log to Sentry
          Sentry is an open source logging and error aggregation platform.  Setting
          sentry_dsn will enable the Sentry middleware and errors will be sent to the
          indicated sentry instance.  This connection string is available in your
          sentry instance under <project_name> -> Settings -> API Keys.
      
      statsd_host:
        type: str
        required: false
        desc: |
          Log to statsd
          Statsd is an external statistics aggregator (https://github.com/etsy/statsd)
          Enabling the following options will cause galaxy to log request timing and
          other statistics to the configured statsd instance.  The statsd_prefix is
          useful if you are running multiple Galaxy instances and want to segment
          statistics between them within the same aggregator.
      
      statsd_port:
        type: int
        required: false
        desc: |
          Log to statsd
          Statsd is an external statistics aggregator (https://github.com/etsy/statsd)
          Enabling the following options will cause galaxy to log request timing and
          other statistics to the configured statsd instance.  The statsd_prefix is
          useful if you are running multiple Galaxy instances and want to segment
          statistics between them within the same aggregator.
      
      statsd_prefix:
        type: str
        required: false
        desc: |
          Log to statsd
          Statsd is an external statistics aggregator (https://github.com/etsy/statsd)
          Enabling the following options will cause galaxy to log request timing and
          other statistics to the configured statsd instance.  The statsd_prefix is
          useful if you are running multiple Galaxy instances and want to segment
          statistics between them within the same aggregator.
      
      library_import_dir:
        type: str
        required: false
        desc: |
          Add an option to the library upload form which allows administrators to
          upload a directory of files.
      
      user_library_import_dir:
        type: str
        required: false
        desc: |
          Add an option to the library upload form which allows authorized
          non-administrators to upload a directory of files.  The configured directory
          must contain sub-directories named the same as the non-admin user's Galaxy
          login ( email ).  The non-admin user is restricted to uploading files or
          sub-directories of files contained in their directory.
      
      allow_library_path_paste:
        type: str
        required: false
        desc: |
          Add an option to the admin library upload tool allowing admins to paste
          filesystem paths to files and directories in a box, and these paths will be
          added to a library.  Set to True to enable.  Please note the security
          implication that this will give Galaxy Admins access to anything your Galaxy
          user has access to.
      
      disable_library_comptypes:
        type: str
        required: false
        desc: |
          Users may choose to download multiple files from a library in an archive.  By
          default, Galaxy allows users to select from a few different archive formats
          if testing shows that Galaxy is able to create files using these formats.
          Specific formats can be disabled with this option, separate more than one
          format with commas.  Available formats are currently 'zip', 'gz', and 'bz2'.
      
      transfer_manager_port:
        type: int
        required: false
        desc: |
          Some sequencer integration features in beta allow you to automatically
          transfer datasets.  This is done using a lightweight transfer manager which
          runs outside of Galaxy (but is spawned by it automatically).  Galaxy will
          communicate with this manager over the port specified here.
      
      enable_whoosh_library_search:
        type: str
        required: false
        desc: |
          Search data libraries with whoosh
          Whoosh indexes are stored in this directory.
      
      whoosh_index_dir:
        type: str
        required: false
        desc: |
          Search data libraries with whoosh
          Whoosh indexes are stored in this directory.
      
      enable_lucene_library_search:
        type: str
        required: false
        desc: |
          Search data libraries with lucene
          maximum file size to index for searching, in MB
          base URL of server providing search functionality using lucene
      
      fulltext_max_size:
        type: int
        required: false
        desc: |
          Search data libraries with lucene
          maximum file size to index for searching, in MB
          base URL of server providing search functionality using lucene
      
      fulltext_noindex_filetypes:
        type: str
        required: false
        desc: |
          Search data libraries with lucene
          maximum file size to index for searching, in MB
          base URL of server providing search functionality using lucene
      
      fulltext_url:
        type: str
        required: false
        desc: |
          Search data libraries with lucene
          maximum file size to index for searching, in MB
          base URL of server providing search functionality using lucene
      
      id_secret:
        type: str
        required: false
        desc: |
          Galaxy encodes various internal values when these values will be output in
          some format (for example, in a URL or cookie).  You should set a key to be
          used by the algorithm that encodes and decodes these values.  It can be any
          string.  If left unchanged, anyone could construct a cookie that would grant
          them access to others' sessions.
          One simple way to generate a value for this is with the shell command:
            python -c 'import time; print time.time()' | md5sum | cut -f 1 -d ' '
      
      use_remote_user:
        type: str
        required: false
        desc: |
          User authentication can be delegated to an upstream proxy server (usually
          Apache).  The upstream proxy should set a REMOTE_USER header in the request.
          Enabling remote user disables regular logins.  For more information, see:
            https://wiki.galaxyproject.org/Admin/Config/ApacheProxy
      
      remote_user_maildomain:
        type: str
        required: false
        desc: |
          If use_remote_user is enabled and your external authentication
          method just returns bare usernames, set a default mail domain to be appended
          to usernames, to become your Galaxy usernames (email addresses).
      
      remote_user_header:
        type: str
        required: false
        desc: |
          If use_remote_user is enabled, the header that the upstream proxy provides
          the remote username in defaults to HTTP_REMOTE_USER (the 'HTTP_' is prepended
          by WSGI).  This option allows you to change the header.  Note, you still need
          to prepend 'HTTP_' to the header in this option, but your proxy server should
          *not* include 'HTTP_' at the beginning of the header name.
      
      remote_user_secret:
        type: str
        required: false
        desc: |
          If use_remote_user is enabled, anyone who can log in to the Galaxy host may
          impersonate any other user by simply sending the appropriate header.  Thus a
          secret shared between the upstream proxy server, and Galaxy is required.
          If anyone other than the Galaxy user is using the server, then apache/nginx
          should pass a value in the header 'GX_SECRET' that is identical to the one
          below.
      
      remote_user_logout_href:
        type: str
        required: false
        desc: |
          If use_remote_user is enabled, you can set this to a URL that will log your
          users out.
      
      normalize_remote_user_email:
        type: str
        required: false
        desc: |
          If your proxy and/or authentication source does not normalize e-mail
          addresses or user names being passed to Galaxy - set the following option
          to True to force these to lower case.
      
      single_user:
        type: str
        required: false
        desc: |
          If an e-mail address is specified here, it will hijack remote user mechanics
          (``use_remote_user``) and have the webapp inject a single fixed user. This
          has the effect of turning Galaxy into a single user application with no
          login or external proxy required. Such applications should not be exposed to
          the world.
      
      admin_users:
        type: str
        required: false
        desc: |
          Administrative users - set this to a comma-separated list of valid Galaxy
          users (email addresses).  These users will have access to the Admin section
          of the server, and will have access to create users, groups, roles,
          libraries, and more.  For more information, see:
            https://wiki.galaxyproject.org/Admin/Interface
      
      require_login:
        type: str
        required: false
        desc: |
          Force everyone to log in (disable anonymous access).
      
      show_welcome_with_login:
        type: str
        required: false
        desc: |
          Show the site's welcome page (see welcome_url) alongside the login page
          (even if require_login is True)
      
      allow_user_creation:
        type: str
        required: false
        desc: |
          Allow unregistered users to create new accounts (otherwise, they will have to
          be created by an admin).
      
      allow_user_deletion:
        type: str
        required: false
        desc: |
          Allow administrators to delete accounts.
      
      allow_user_impersonation:
        type: str
        required: false
        desc: |
          Allow administrators to log in as other users (useful for debugging)
      
      allow_user_dataset_purge:
        type: str
        required: false
        desc: |
          Allow users to remove their datasets from disk immediately (otherwise,
          datasets will be removed after a time period specified by an administrator in
          the cleanup scripts run via cron)
      
      new_user_dataset_access_role_default_private:
        type: str
        required: false
        desc: |
          By default, users' data will be public, but setting this to True will cause
          it to be private.  Does not affect existing users and data, only ones created
          after this option is set.  Users may still change their default back to
          public.
      
      expose_user_name:
        type: str
        required: false
        desc: |
          Expose user list.  Setting this to True will expose the user list to
          authenticated users.  This makes sharing datasets in smaller galaxy instances
          much easier as they can type a name/email and have the correct user show up.
          This makes less sense on large public Galaxy instances where that data
          shouldn't be exposed.  For semi-public Galaxies, it may make sense to expose
          just the username and not email, or vice versa.
      
      expose_user_email:
        type: str
        required: false
        desc: |
          Expose user list.  Setting this to True will expose the user list to
          authenticated users.  This makes sharing datasets in smaller galaxy instances
          much easier as they can type a name/email and have the correct user show up.
          This makes less sense on large public Galaxy instances where that data
          shouldn't be exposed.  For semi-public Galaxies, it may make sense to expose
          just the username and not email, or vice versa.
      
      run_workflow_toolform_upgrade:
        type: str
        required: false
        desc: |
          -- Beta features
          Enable new run workflow form
      
      enable_sequencer_communication:
        type: str
        required: false
        desc: |
          Enable Galaxy to communicate directly with a sequencer
      
      enable_beta_tool_command_isolation:
        type: str
        required: false
        desc: |
          Separate tool command from rest of job script so tool dependencies
          don't interfer with metadata generation.
          Despite the name, this feature is enabled by default
          in 16.01 and the option will go away in the future.
      
      enable_beta_ts_api_install:
        type: str
        required: false
        desc: |
          Enable the new interface for installing tools from Tool Shed
          via the API. Admin menu will list both if enabled.
      
      tool_submission_burst_threads:
        type: int
        required: false
        desc: |
          Set the following to a number of threads greater than 1 to spawn
          a Python task queue for dealing with large tool submissions (either
          through the tool form or as part of an individual workflow step across
          large collection). The size of a "large" tool request is controlled by
          the second parameter below and defaults to 10. This affects workflow
          scheduling and web processes, not job handlers.
      
      tool_submission_burst_at:
        type: int
        required: false
        desc: |
          Set the following to a number of threads greater than 1 to spawn
          a Python task queue for dealing with large tool submissions (either
          through the tool form or as part of an individual workflow step across
          large collection). The size of a "large" tool request is controlled by
          the second parameter below and defaults to 10. This affects workflow
          scheduling and web processes, not job handlers.
      
      enable_beta_workflow_modules:
        type: str
        required: false
        desc: |
          Enable beta workflow modules that should not yet be considered part of Galaxy's
          stable API.
      
      force_beta_workflow_scheduled_min_steps:
        type: int
        required: false
        desc: |
          Force usage of Galaxy's beta workflow scheduler under certain circumstances -
          this workflow scheduling forces Galaxy to schedule workflows in the background
          so initial submission of the workflows is signficantly sped up. This does
          however force the user to refresh their history manually to see newly scheduled
          steps (for "normal" workflows - steps are still scheduled far in advance of
          them being queued and scheduling here doesn't refer to actual cluster job
          scheduling).
          Workflows containing more than the specified number of steps will always use
          the Galaxy's beta workflow scheduling.
          Switch to using Galaxy's beta workflow scheduling for all workflows involving
          ccollections.
      
      force_beta_workflow_scheduled_for_collections:
        type: str
        required: false
        desc: |
          Force usage of Galaxy's beta workflow scheduler under certain circumstances -
          this workflow scheduling forces Galaxy to schedule workflows in the background
          so initial submission of the workflows is signficantly sped up. This does
          however force the user to refresh their history manually to see newly scheduled
          steps (for "normal" workflows - steps are still scheduled far in advance of
          them being queued and scheduling here doesn't refer to actual cluster job
          scheduling).
          Workflows containing more than the specified number of steps will always use
          the Galaxy's beta workflow scheduling.
          Switch to using Galaxy's beta workflow scheduling for all workflows involving
          ccollections.
      
      enable_openid:
        type: str
        required: false
        desc: |
          Enable authentication via OpenID.  Allows users to log in to their Galaxy
          account by authenticating with an OpenID provider.
          .sample used if default does not exist
      
      openid_config_file:
        type: str
        required: false
        desc: |
          Enable authentication via OpenID.  Allows users to log in to their Galaxy
          account by authenticating with an OpenID provider.
          .sample used if default does not exist
      
      openid_consumer_cache_path:
        type: str
        required: false
        desc: |
          Enable authentication via OpenID.  Allows users to log in to their Galaxy
          account by authenticating with an OpenID provider.
          .sample used if default does not exist
      
      auth_config_file:
        type: str
        required: false
        desc: |
          XML config file that allows the use of different authentication providers
          (e.g. LDAP) instead or in addition to local authentication (.sample is used
          if default does not exist).
      
      api_allow_run_as:
        type: str
        required: false
        desc: |
          Optional list of email addresses of API users who can make calls on behalf of
          other users.
      
      master_api_key:
        type: str
        required: false
        desc: |
          Master key that allows many API admin actions to be used without actually
          having a defined admin user in the database/config.  Only set this if you
          need to bootstrap Galaxy, you probably do not want to set this on public
          servers.
      
      enable_tool_tags:
        type: str
        required: false
        desc: |
          Enable tool tags (associating tools with tags).  This has its own option
          since its implementation has a few performance implications on startup for
          large servers.
      
      enable_unique_workflow_defaults:
        type: str
        required: false
        desc: |
          Enable a feature when running workflows.  When enabled, default datasets
          are selected for "Set at Runtime" inputs from the history such that the
          same input will not be selected twice, unless there are more inputs than
          compatible datasets in the history.
          When False, the most recently added compatible item in the history will
          be used for each "Set at Runtime" input, independent of others in the Workflow
      
      myexperiment_url:
        type: str
        required: false
        desc: |
          The URL to the myExperiment instance being used (omit scheme but include port)
      
      ftp_upload_dir:
        type: str
        required: false
        desc: |
          This should point to a directory containing subdirectories matching users'
          identifier (defaults to e-mail), where Galaxy will look for files.
      
      ftp_upload_site:
        type: str
        required: false
        desc: |
          This should be the hostname of your FTP server, which will be provided to
          users in the help text.
      
      ftp_upload_dir_identifier:
        type: str
        required: false
        desc: |
          User attribute to use as subdirectory in calculating default ftp_upload_dir
          pattern. By default this will be email so a user's FTP upload directory will be
          ${ftp_upload_dir}/${user.email}. Can set this to other attributes such as id or
          username though.
      
      ftp_upload_dir_template:
        type: str
        required: false
        desc: |
          Python string template used to determine an FTP upload directory for a
          particular user.
      
      ftp_upload_purge:
        type: str
        required: false
        desc: |
          This should be set to False to prevent Galaxy from deleting uploaded FTP files
          as it imports them.
      
      enable_quotas:
        type: str
        required: false
        desc: |
          Enable enforcement of quotas.  Quotas can be set from the Admin interface.
      
      expose_dataset_path:
        type: str
        required: false
        desc: |
          This option allows users to see the full path of datasets via the "View
          Details" option in the history.  Administrators can always see this.
      
      enable_data_manager_user_view:
        type: str
        required: false
        desc: |
          Data manager configuration options
          Allow non-admin users to view available Data Manager options.
          File where Data Managers are configured (.sample used if default does not
          exist).
          File where Tool Shed based Data Managers are configured.
          Directory to store Data Manager based tool-data; defaults to tool_data_path.
      
      data_manager_config_file:
        type: str
        required: false
        desc: |
          Data manager configuration options
          Allow non-admin users to view available Data Manager options.
          File where Data Managers are configured (.sample used if default does not
          exist).
          File where Tool Shed based Data Managers are configured.
          Directory to store Data Manager based tool-data; defaults to tool_data_path.
      
      shed_data_manager_config_file:
        type: str
        required: false
        desc: |
          Data manager configuration options
          Allow non-admin users to view available Data Manager options.
          File where Data Managers are configured (.sample used if default does not
          exist).
          File where Tool Shed based Data Managers are configured.
          Directory to store Data Manager based tool-data; defaults to tool_data_path.
      
      galaxy_data_manager_data_path:
        type: str
        required: false
        desc: |
          Data manager configuration options
          Allow non-admin users to view available Data Manager options.
          File where Data Managers are configured (.sample used if default does not
          exist).
          File where Tool Shed based Data Managers are configured.
          Directory to store Data Manager based tool-data; defaults to tool_data_path.
      
      job_config_file:
        type: str
        required: false
        desc: |
          By default, Galaxy manages and executes jobs from within a single process and
          notifies itself of new jobs via in-memory queues.  Jobs are run locally on
          the system on which Galaxy is started.  Advanced job running capabilities can
          be configured through the job configuration file.
      
      track_jobs_in_database:
        type: str
        required: false
        desc: |
          In multiprocess configurations, notification between processes about new jobs
          must be done via the database.  In single process configurations, this can be
          done in memory, which is a bit quicker.
      
      use_tasked_jobs:
        type: str
        required: false
        desc: |
          This enables splitting of jobs into tasks, if specified by the particular tool
          config.
          This is a new feature and not recommended for production servers yet.
      
      local_task_queue_workers:
        type: int
        required: false
        desc: |
          This enables splitting of jobs into tasks, if specified by the particular tool
          config.
          This is a new feature and not recommended for production servers yet.
      
      enable_job_recovery:
        type: str
        required: false
        desc: |
          Enable job recovery (if Galaxy is restarted while cluster jobs are running,
          it can "recover" them when it starts).  This is not safe to use if you are
          running more than one Galaxy server using the same database.
      
      retry_metadata_internally:
        type: str
        required: false
        desc: |
          Although it is fairly reliable, setting metadata can occasionally fail.  In
          these instances, you can choose to retry setting it internally or leave it in
          a failed state (since retrying internally may cause the Galaxy process to be
          unresponsive).  If this option is set to False, the user will be given the
          option to retry externally, or set metadata manually (when possible).
      
      max_metadata_value_size:
        type: int
        required: false
        desc: |
          Very large metadata values can cause Galaxy crashes.  This will allow
          limiting the maximum metadata key size (in bytes used in memory, not the end
          result database value size) Galaxy will attempt to save with a dataset.  Use
          0 to disable this feature.  The default is 5MB, but as low as 1MB seems to be
          a reasonable size.
      
      outputs_to_working_directory:
        type: str
        required: false
        desc: |
          If (for example) you run on a cluster and your datasets (by default,
          database/files/) are mounted read-only, this option will override tool output
          paths to write outputs to the working directory instead, and the job manager
          will move the outputs to their proper place in the dataset directory on the
          Galaxy server after the job completes.
      
      retry_job_output_collection:
        type: int
        required: false
        desc: |
          If your network filesystem's caching prevents the Galaxy server from seeing
          the job's stdout and stderr files when it completes, you can retry reading
          these files.  The job runner will retry the number of times specified below,
          waiting 1 second between tries.  For NFS, you may want to try the -noac mount
          option (Linux) or -actimeo=0 (Solaris).
      
      cleanup_job:
        type: str
        required: false
        desc: |
          Clean up various bits of jobs left on the filesystem after completion.  These
          bits include the job working directory, external metadata temporary files,
          and DRM stdout and stderr files (if using a DRM).  Possible values are:
          always, onsuccess, never
      
      drmaa_external_runjob_script:
        type: str
        required: false
        desc: |
          For sites where all users in Galaxy match users on the system on which Galaxy
          runs, the DRMAA job runner can be configured to submit jobs to the DRM as the
          actual user instead of as the user running the Galaxy server process.  For
          details on these options, see the documentation at:
          
          https://wiki.galaxyproject.org/Admin/Config/Performance/Cluster
          
      
      drmaa_external_killjob_script:
        type: str
        required: false
        desc: |
          For sites where all users in Galaxy match users on the system on which Galaxy
          runs, the DRMAA job runner can be configured to submit jobs to the DRM as the
          actual user instead of as the user running the Galaxy server process.  For
          details on these options, see the documentation at:
          
          https://wiki.galaxyproject.org/Admin/Config/Performance/Cluster
          
      
      external_chown_script:
        type: str
        required: false
        desc: |
          For sites where all users in Galaxy match users on the system on which Galaxy
          runs, the DRMAA job runner can be configured to submit jobs to the DRM as the
          actual user instead of as the user running the Galaxy server process.  For
          details on these options, see the documentation at:
          
          https://wiki.galaxyproject.org/Admin/Config/Performance/Cluster
          
      
      environment_setup_file:
        type: str
        required: false
        desc: |
          File to source to set up the environment when running jobs.  By default, the
          environment in which the Galaxy server starts is used when running jobs
          locally, and the environment set up per the DRM's submission method and
          policy is used when running jobs on a cluster (try testing with `qsub` on the
          command line).  environment_setup_file can be set to the path of a file on
          the cluster that should be sourced by the user to set up the environment
          prior to running tools.  This can be especially useful for running jobs as
          the actual user, to remove the need to configure each user's environment
          individually.
      
      job_resource_params_file:
        type: str
        required: false
        desc: |
          Optional file containing job resource data entry fields definition.
          These fields will be presented to users in the tool forms and allow them to
          overwrite default job resources such as number of processors, memory and
          walltime.
      
      cache_user_job_count:
        type: str
        required: false
        desc: |
          If using job concurrency limits (configured in job_config_file), several
          extra database queries must be performed to determine the number of jobs a
          user has dispatched to a given destination.  By default, these queries will
          happen for every job that is waiting to run, but if cache_user_job_count is
          set to True, it will only happen once per iteration of the handler queue.
          Although better for performance due to reduced queries, the tradeoff is a
          greater possibility that jobs will be dispatched past the configured limits
          if running many handlers.
      
      tool_filters:
        type: str
        required: false
        desc: |
      
      tool_label_filters:
        type: str
        required: false
        desc: |
      
      tool_section_filters:
        type: str
        required: false
        desc: |
      
      user_tool_filters:
        type: str
        required: false
        desc: |
      
      user_tool_section_filters:
        type: str
        required: false
        desc: |
      
      user_tool_label_filters:
        type: str
        required: false
        desc: |
      
      toolbox_filter_base_modules:
        type: str
        required: false
        desc: |
          The base modules that are searched for modules as described above
          can be modified and modules external to Galaxy can be searched by
          modifying the following option.
      
      amqp_internal_connection:
        type: str
        required: false
        desc: |
      
      enable_communication_server:
        type: str
        required: false
        desc: |
          Galaxy real time communication server settings
          persistent_communication_rooms is a comma-separated list of rooms that should be always available.
      
      communication_server_host:
        type: str
        required: false
        desc: |
          Galaxy real time communication server settings
          persistent_communication_rooms is a comma-separated list of rooms that should be always available.
      
      communication_server_port:
        type: int
        required: false
        desc: |
          Galaxy real time communication server settings
          persistent_communication_rooms is a comma-separated list of rooms that should be always available.
      
      persistent_communication_rooms:
        type: str
        required: false
        desc: |
          Galaxy real time communication server settings
          persistent_communication_rooms is a comma-separated list of rooms that should be always available.
